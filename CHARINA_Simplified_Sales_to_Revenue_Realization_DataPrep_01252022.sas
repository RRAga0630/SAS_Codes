options compress = yes;
libname Revenue1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Revenue\';
libname Oppos1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Opportunity\';
libname Mapping1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Mapping\';
libname RevReal1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Dashboard\';
libname Anomaly1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Anomaly\';
libname Reps1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\SalesRep\';
libname Partner1 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Partner\';
libname Data2019 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Data2019\';

***================================================================================================***
NOTE: Skip this part if data for the same month with updated Anomaly/Mapping files is being run. 
	  Look for "START HERE INSTEAD";
***================================================================================================***;
/*REVENUE DATA EXTRACTION FROM DWH*/

/*Backup MN data*/
data Revenue1.REV_MN_PRIOR_VERSION;
set Revenue1.REV_MN_WDF;
run;


/*1.1 - METRANET DATA EXTRACTION - Latest Month*/

PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Revenue1.REV_MN_LATEST_MON AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT  
    'Monthly' AS TYPE,  
	decode(COMPANY_A.BU_ID,2,'EMEA',3,'APAC',4,'CANADA',1,'USA','Other') AS BU,
	SERVICE_A.SERVICE_NAME,
	DWREP_USER.GetLineOfBusiness(SERVICE_A.SERVICE_NAME,SERVICE_A.LINE_OF_BUSINESS,SERVICE_A.SERVICE_CATEGORY,SERVICE_A.SUB_CATEGORY,SERVICE_B.SERVICE_NAME,SERVICE_B.LINE_OF_BUSINESS,SERVICE_B.SERVICE_CATEGORY,SERVICE_B.SUB_CATEGORY,PRODUCT_A.CHARGE_CODE,PRODUCT_A.DS_SERVICE_NAME) as LOB,   
    CASE WHEN GBL_CHARGE_CODE_DIM_A.CHARGE_CODE LIKE 'CCA%' THEN 'Automated-CCA' ELSE DWREP_USER.GetCategory(ENTITY_A.ENTITY_CODE,SERVICE_A.SERVICE_NAME,SERVICE_A.LINE_OF_BUSINESS,SERVICE_A.SERVICE_CATEGORY,SERVICE_A.SUB_CATEGORY,SERVICE_B.SERVICE_NAME,SERVICE_B.LINE_OF_BUSINESS,SERVICE_B.SERVICE_CATEGORY,SERVICE_B.SUB_CATEGORY,PRODUCT_A.CHARGE_CODE,PRODUCT_A.DS_SERVICE_NAME) END AS CATEGORY,   
	CASE   
		WHEN COMPANY_A.ENTITY_CODE IN ('V18','V19') AND COMPANY_A.CUSTOM_SUB_ENTITY_ID IS NOT NULL THEN COMPANY_A.CUSTOM_SUB_ENTITY_ID   
		WHEN COMPANY_A.ENTITY_CODE IN('NAVL','-1','K7Z','999','902','907','905','901','909','903','910','908','904','906','900','DRT') THEN TO_CHAR(COMPANY_A.COMPANY_ID)   
		ELSE COMPANY_A.ENTITY_CODE   
		END AS ENTITY_CODE,   
	CASE   
		WHEN COMPANY_A.ENTITY_CODE IN ('V18','V19') AND COMPANY_A.CUSTOM_SUB_ENTITY_ID IS NOT NULL THEN COMPANY_A.CUSTOM_SUB_ENTITY_NAME   
		WHEN COMPANY_A.ENTITY_CODE IN ('NAVL','-1','K7Z','999','902','907','905','901','909','903','910','908','904','906','900','DRT') THEN COMPANY_A.COMPANY_NAME   
		ELSE ENTITY_A.ENTITY_NAME   
		END AS ENTITY_NAME,
	TO_CHAR(COMPANY_A.COMPANY_ID) AS COMPANY_ID, 
	COMPANY_A.COMPANY_NAME AS COMPANY_NAME,
	CCA_CO_LIST.COMPANY_NUMBER as COMPANY_NUMBER_CCA,
	(CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU'
	WHEN PRODUCT_A.CHARGE_CODE like 'UMX%' THEN 'HOOT'
	ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) AS FINANCE_PRODUCT_DWH,
	(CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') AND GL_MAP_A.PRODUCT NOT IN ('06') THEN 'Y' ELSE 'N' END) AS FLEX_REVENUE_FLAG,
	(CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') AND GL_MAP_A.PRODUCT IN ('06') THEN 'Y' ELSE 'N' END) AS FLEX_CALLING_REVENUE_FLAG,
	(CASE WHEN PRODUCT_A.CHARGE_CODE in ('RPSUB', 'STUP') THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Adobe Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Proprietary Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'Y' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'N' AND (CCA_CO_LIST.COMPANY_NUMBER IS NOT NULL) THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'N' AND (CCA_CO_LIST.COMPANY_NUMBER IS NULL) THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Attended' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Proprietary Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Bridging' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Equipment' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Managed Services' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video BlueJeans' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Audio' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'TNU' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Hosted Voice' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Managed Network' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Revenue (WIPC)' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'UM Pro' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'West UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Equipment & License' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Professional Services IP' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Event Services' THEN 'UC'
	ELSE 'Not Assigned'
	END) as PRODUCT_TYPE,
 
    CASE   
        WHEN INVOICE_A.TRANSACTION_TYPE IN ('D','C','LF') THEN 'Memo'   
        WHEN INVOICE_A.TRANSACTION_TYPE IN ('I','U') THEN 'Legs'   
        ELSE 'Features'   
    END AS CHARGE_TYPE,   
    CASE WHEN INVOICE_A.USD_CHARGE < 0 THEN 'Credit' ELSE 'Invoiced Revenue' END AS REVENUE_TYPE,   
    MONTH_A.MONTH_START,
    NVL(SG.SEGMENT_DESC,'Not Available') AS SEGMENT_DESC,
	'UC' AS WEST_BUSINESS_UNIT,
    GBL_CHARGE_CODE_DIM_A.CHARGE_CODE,
	GBL_CHARGE_CODE_DIM_A.CHARGE_DESC,
    GBL_CHARGE_CODE_DIM_A.CHARGE_TYPE AS CHARGE_CODE_TYPE,
	INVOICE_A.INV_CURR_CODE,
	'Metranet' as SourceData,
    SUM(INVOICE_A.INV_MINUTES) AS MINS,   
    SUM(INVOICE_A.INV_QUANTITY) AS QTY,   
    SUM(CASE   
        WHEN (COMPANY_A.COMPANY_ID = 399395 AND PRODUCT_A.CHARGE_CODE = 'MC316') THEN 0   
        ELSE INVOICE_A.USD_CHARGE   
    END) AS USD_REV,
	Sum(INVOICE_A.INV_CHARGE) AS INV_REV

FROM   
		DM_GCH.GCH_FCT_INVOICE INVOICE_A   
	JOIN DM_GCH.GCH_DIM_PRODUCT PRODUCT_A ON   
		PRODUCT_A.GCH_CHARGE_CODE_KEY = INVOICE_A.GCH_CHARGE_CODE_KEY   
	JOIN DM_GCH.GCH_DIM_SERVICE SERVICE_A ON   
		SERVICE_A.GCH_SERVICE_KEY = PRODUCT_A.GCH_SERVICE_KEY   
	JOIN GBL_DIMS.GBL_CHARGE_CODE_DIM GBL_CHARGE_CODE_DIM_A ON   
		GBL_CHARGE_CODE_DIM_A.GBL_CHARGE_CODE_KEY = PRODUCT_A.GBL_DIMS_GBL_CHARGE_CODE_KEY   
	JOIN DM_GCH.GCH_DIM_service SERVICE_B ON   
		SERVICE_B.GCH_SERVICE_KEY = INVOICE_A.GCH_SERVICE_KEY   
	JOIN DM_GCH.GCH_DIM_MONTH MONTH_A ON   
		MONTH_A.MONTH_ID = INVOICE_A.MONTH_ID
	JOIN DM_GCH.GCH_DIM_ACCOUNT ACCOUNT_A ON   
		ACCOUNT_A.GCH_ACCOUNT_KEY = INVOICE_A.GCH_ACCOUNT_KEY   
	JOIN DM_GCH.GCH_DIM_COMPANY COMPANY_A ON   
		COMPANY_A.GCH_COMPANY_KEY = ACCOUNT_A.GCH_COMPANY_KEY   
	LEFT OUTER JOIN DM_GCH.GCH_DIM_ENTITY ENTITY_A ON   
		ENTITY_A.ENTITY_CODE = COMPANY_A.ENTITY_CODE   
	JOIN GBL_DIMS.COMPANY_DIM COMPANY_DIM_A ON   
		COMPANY_DIM_A.COMPANY_KEY = COMPANY_A.GBL_DIMS_COMPANY_KEY   
	LEFT OUTER JOIN GBL_DIMS.FIN_GBL_GL_MAPPING_DIM GL_MAP_A ON  
		GL_MAP_A.CHARGE_CODE = GBL_CHARGE_CODE_DIM_A.CHARGE_CODE  
		AND GL_MAP_A.CHARGE_TYPE = GBL_CHARGE_CODE_DIM_A.CHARGE_TYPE  
	LEFT OUTER JOIN GBL_DIMS.FIN_PROD_MAPPING_DIM FIN_PROD_A ON  
		FIN_PROD_A.NATURAL_ACCOUNT = GL_MAP_A.NATURAL_ACCOUNT  
		AND FIN_PROD_A.PRODUCT = GL_MAP_A.PRODUCT  
		AND FIN_PROD_A.GBL_SERVICE_KEY = GBL_CHARGE_CODE_DIM_A.SERVICE_KEY  
	LEFT OUTER JOIN GBL_DIMS.FIN_PROD_OVERRIDE_DIM FIN_PROD_OVERRIDE_A ON  
		FIN_PROD_OVERRIDE_A.CHARGE_CODE = GBL_CHARGE_CODE_DIM_A.CHARGE_CODE  
		AND FIN_PROD_OVERRIDE_A.CHARGE_TYPE = GBL_CHARGE_CODE_DIM_A.CHARGE_TYPE  
	LEFT OUTER JOIN WEST_GLOBAL_DM.WEST_CUSTOMER_DIM CO ON
		CO.CUSTOMER_ID = TO_CHAR(COMPANY_A.COMPANY_ID)
		AND CO.SOURCE_ID = 101
	LEFT JOIN WEST_GLOBAL_DM.SEGMENT_DIM SG ON
		CO.SEGMENT_KEY = SG.SEGMENT_KEY
	LEFT OUTER JOIN GBL_DIMS.FIN_PROD_MAPPING_DIM FIN_PROD_A ON   
		FIN_PROD_A.NATURAL_ACCOUNT = GL_MAP_A.NATURAL_ACCOUNT   
		AND FIN_PROD_A.PRODUCT = GL_MAP_A.PRODUCT   
		AND FIN_PROD_A.GBL_SERVICE_KEY = GBL_CHARGE_CODE_DIM_A.SERVICE_KEY   
	LEFT OUTER JOIN DWREP_USER.MONTH_CCA_COMPANY CCA_CO_LIST ON
		CCA_CO_LIST.COMPANY_NUMBER = COMPANY_DIM_A.COMPANY_NUMBER
		AND CCA_CO_LIST.MONTH_START = MONTH_A.MONTH_START

/*EDIT FOR MONTHLY REFRESH*/
WHERE MONTH_A.MONTH_START >= TO_DATE('2022-01-01','YYYY-MM-DD')
AND MONTH_A.MONTH_START <= TO_DATE('2022-01-01','YYYY-MM-DD')  
AND	GL_MAP_A.PRODUCT IN ('01','02','03','04','06') 

GROUP BY
	'Monthly',  
	decode(COMPANY_A.BU_ID,2,'EMEA',3,'APAC',4,'CANADA',1,'USA','Other'),
	SERVICE_A.SERVICE_NAME,
	DWREP_USER.GetLineOfBusiness(SERVICE_A.SERVICE_NAME,SERVICE_A.LINE_OF_BUSINESS,SERVICE_A.SERVICE_CATEGORY,SERVICE_A.SUB_CATEGORY,SERVICE_B.SERVICE_NAME,SERVICE_B.LINE_OF_BUSINESS,SERVICE_B.SERVICE_CATEGORY,SERVICE_B.SUB_CATEGORY,PRODUCT_A.CHARGE_CODE,PRODUCT_A.DS_SERVICE_NAME),   
    CASE WHEN GBL_CHARGE_CODE_DIM_A.CHARGE_CODE LIKE 'CCA%' THEN 'Automated-CCA' ELSE DWREP_USER.GetCategory(ENTITY_A.ENTITY_CODE,SERVICE_A.SERVICE_NAME,SERVICE_A.LINE_OF_BUSINESS,SERVICE_A.SERVICE_CATEGORY,SERVICE_A.SUB_CATEGORY,SERVICE_B.SERVICE_NAME,SERVICE_B.LINE_OF_BUSINESS,SERVICE_B.SERVICE_CATEGORY,SERVICE_B.SUB_CATEGORY,PRODUCT_A.CHARGE_CODE,PRODUCT_A.DS_SERVICE_NAME) END,   

	CASE   
		WHEN COMPANY_A.ENTITY_CODE IN ('V18','V19') AND COMPANY_A.CUSTOM_SUB_ENTITY_ID IS NOT NULL THEN COMPANY_A.CUSTOM_SUB_ENTITY_ID   
		WHEN COMPANY_A.ENTITY_CODE IN('NAVL','-1','K7Z','999','902','907','905','901','909','903','910','908','904','906','900','DRT') THEN TO_CHAR(COMPANY_A.COMPANY_ID)   
		ELSE COMPANY_A.ENTITY_CODE   
		END,   
	CASE   
		WHEN COMPANY_A.ENTITY_CODE IN ('V18','V19') AND COMPANY_A.CUSTOM_SUB_ENTITY_ID IS NOT NULL THEN COMPANY_A.CUSTOM_SUB_ENTITY_NAME   
		WHEN COMPANY_A.ENTITY_CODE IN ('NAVL','-1','K7Z','999','902','907','905','901','909','903','910','908','904','906','900','DRT') THEN COMPANY_A.COMPANY_NAME   
		ELSE ENTITY_A.ENTITY_NAME   
		END,
	TO_CHAR(COMPANY_A.COMPANY_ID), 
	COMPANY_A.COMPANY_NAME,
	CCA_CO_LIST.COMPANY_NUMBER,
	(CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU'
	WHEN PRODUCT_A.CHARGE_CODE like 'UMX%' THEN 'HOOT'
	ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END),
	(CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') AND GL_MAP_A.PRODUCT NOT IN ('06') THEN 'Y' ELSE 'N' END),
	(CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') AND GL_MAP_A.PRODUCT IN ('06') THEN 'Y' ELSE 'N' END),
    
	(CASE WHEN PRODUCT_A.CHARGE_CODE in ('RPSUB', 'STUP') THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Adobe Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Proprietary Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'Y' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'N' AND (CCA_CO_LIST.COMPANY_NUMBER IS NOT NULL) THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Web' AND (CASE WHEN GL_MAP_A.NATURAL_ACCOUNT IN ('5751','5386','5153') THEN 'Y' ELSE 'N' END) = 'N' AND (CCA_CO_LIST.COMPANY_NUMBER IS NULL) THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Attended' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Proprietary Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Bridging' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Web' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Audio' THEN 'UC'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Equipment' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video Managed Services' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video BlueJeans' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Cisco Audio' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'TNU' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Hosted Voice' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Microsoft UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Managed Network' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Revenue (WIPC)' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'UM Pro' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Video' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'West UC' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Equipment & License' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Professional Services IP' THEN 'UCaaS'
	WHEN (CASE WHEN PRODUCT_A.CHARGE_CODE like 'TNU%' THEN 'TNU' ELSE NVL(FIN_PROD_OVERRIDE_A.FINANCE_PRODUCT,NVL(FIN_PROD_A.FINANCE_PRODUCT,'Other')) END) = 'Other Event Services' THEN 'UC'
	ELSE 'Not Assigned'
	END),
    CASE   
        WHEN INVOICE_A.TRANSACTION_TYPE IN ('D','C','LF') THEN 'Memo'   
        WHEN INVOICE_A.TRANSACTION_TYPE IN ('I','U') THEN 'Legs'   
        ELSE 'Features'   
    END,   
    CASE WHEN INVOICE_A.USD_CHARGE < 0 THEN 'Credit' ELSE 'Invoiced Revenue' END,   
    MONTH_A.MONTH_START,
    NVL(SG.SEGMENT_DESC,'Not Available'),
	'UC',
    GBL_CHARGE_CODE_DIM_A.CHARGE_CODE,
	GBL_CHARGE_CODE_DIM_A.CHARGE_DESC,
    GBL_CHARGE_CODE_DIM_A.CHARGE_TYPE,
	INVOICE_A.INV_CURR_CODE,
	'Metranet'
);
QUIT;


/*Combine Latest and Old MN Revenue data*/
data Revenue1.REV_MN_WDF;
set Revenue1.REV_MN_PRIOR_VERSION Revenue1.REV_MN_LATEST_MON;
run;

/*1.2 - DEFERRED REVENUE TABLE*/
PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Revenue1.GL_DEFERMENT_CODES AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT distinct CHARGE_CODE
FROM DWREP_USER.GL_DEFERMENT_CODES
);
QUIT;

/*1.3 - Attach DEFERRED FLAG to MN REVENUE TABLE*/
PROC SQL;
CREATE TABLE Revenue1.REV_MN AS 
SELECT *, (case when b.CHARGE_CODE is not null then 'PRE-BILLED' else 'NON PRE-BILLED' end) as DEFERRED_REVENUE_FLAG
FROM Revenue1.REV_MN_WDF a left join Revenue1.GL_DEFERMENT_CODES b on a.CHARGE_CODE = b.CHARGE_CODE;
QUIT;

***================================================================================================***
NOTE: START HERE INSTEAD;
***================================================================================================***;

/*1.4 - REVENUE_GSO_MAPPING BACKUP*/
%let fileName = REVENUE_GSO_MAPPING_%sysfunc(today(), DATE9.);
%put &=fileName;

data Mapping1.&fileName;
set Mapping1.REVENUE_GSO_MAPPING;
run;

DATA Mapping1.REVENUE_GSO_MAPPING;
    LENGTH
        CHARGE_CODE      $ 9
        CHARGE_DESC      $ 80
        CHARGE_CODE_TYPE $ 7
        FINANCE_PRODUCT_GSO $ 24
        ADDON_MAC_SUBSC  $ 12
        RECAST_TYPE      $ 10 ;
    FORMAT
        CHARGE_CODE      $CHAR9.
        CHARGE_DESC      $CHAR80.
        CHARGE_CODE_TYPE $CHAR7.
        FINANCE_PRODUCT_GSO $CHAR24.
        ADDON_MAC_SUBSC  $CHAR12.
        RECAST_TYPE      $CHAR10. ;
    INFORMAT
        CHARGE_CODE      $CHAR9.
        CHARGE_DESC      $CHAR80.
        CHARGE_CODE_TYPE $CHAR7.
        FINANCE_PRODUCT_GSO $CHAR24.
        ADDON_MAC_SUBSC  $CHAR12.
        RECAST_TYPE      $CHAR10. ;
    INFILE 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Mapping\REVENUE_GSO_Mapping.csv'
	delimiter=','
	firstobs=2
	lrecl = 32767
	MISSOVER
	DSD;
    INPUT
        CHARGE_CODE      : $CHAR9.
        CHARGE_DESC      : $CHAR80.
        CHARGE_CODE_TYPE : $CHAR7.
        FINANCE_PRODUCT_GSO : $CHAR24.
        ADDON_MAC_SUBSC  : $CHAR12.
        RECAST_TYPE      : $CHAR10. ;
RUN;

proc sql; 
	create table Mapping1.REVENUE_GSO_MAPPING as select
	case when charge_code = '3.65E+03' then '365E1'
		when charge_code = '3.65E+04' then '365E2'
		when charge_code = '3.65E+05' then '365E3'
		when charge_code = '3.65E+06' then '365E4'
		else charge_code end as charge_code,
	charge_desc, charge_code_type,
	finance_product_gso, addon_mac_subsc, recast_type
	from Mapping1.REVENUE_GSO_MAPPING;
quit;

/*1.5 - JOIN MN REVENUE TO GSO MAPPING*/
proc sql;
CREATE TABLE Revenue1.REV_MN_GSO_MAP AS 
select a.*, b.FINANCE_PRODUCT_GSO, b.ADDON_MAC_SUBSC, b.RECAST_TYPE
from Revenue1.REV_MN a left outer join Mapping1.REVENUE_GSO_MAPPING b
on a.CHARGE_CODE = b.CHARGE_CODE and a.CHARGE_CODE_TYPE = b.CHARGE_CODE_TYPE;
quit;

***================================================================================================***
NOTE: Skip this part also if data for the same month with updated Anomaly/Mapping files is being run. 
	  Look for "ITC IMPORT SKIPPED - CONTINUE HERE";
***================================================================================================***;

/*2.1 - WIPC DATA EXTRACTION - Latest Month*/
data Revenue1.REV_WIPC_PRIOR_VERSION;
set Revenue1.REV_WIPC;
run;

PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Revenue1.REV_WIPC_LATEST_MON AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT 
	NVL(ent.entity_code,'-1') as ENTITY_CODE,
	NVL(ent.entity_name,'NO ENTITY') as ENTITY_NAME,
	rev.cid COMPANY_ID,
	rev.company COMPANY_NAME,
	DECODE(rev.product,'Spark Flex Licensing','Hosted Voice', rev.finance_product) FINANCE_PRODUCT_DWH,
	rev.moved_to_month as MONTH_START,
	'IP' as WEST_BUSINESS_UNIT,
	rev.product AS CHARGE_DESC,
	'WIPC' AS SOURCEDATA,
	0 AS MINS,
	0 AS QTY,
	rev.total AS USD_REV,
	0 AS INV_REV,
	DECODE(rev.product,'Spark Flex Licensing','Hosted Voice', rev.finance_product) FINANCE_PRODUCT_GSO,
	rev.ADDON AS ADDON_MAC_SUBSC

FROM ic_na_work.stg_rev_ip_sp rev
LEFT OUTER JOIN dm_gch.gch_dim_company comp
             ON TO_NUMBER(translate(rev.cid, '0123456789' || translate(rev.cid,'x123456789','x'),'0123456789')) = comp.company_id
            AND NVL(comp.source_id,603) = 603
INNER JOIN DM_GCH.GCH_DIM_ENTITY ent
             ON nvl(comp.entity_code, '-1') = ent.entity_code 
/*Edit this to current month*/
WHERE rev.moved_to_month = '01-JAN-22'
);
QUIT;

/*Combine Latest and Old WIPC Revenue data*/
data Revenue1.REV_WIPC;
set Revenue1.REV_WIPC_PRIOR_VERSION Revenue1.REV_WIPC_LATEST_MON;
run;


***================================================================================================***
NOTE: "ITC IMPORT SKIPPED - CONTINUE HERE"
***================================================================================================***;

/*3.1 - COMBINE METRANET and WIPC REVENUE DATA*/
data Revenue1.REV_MN_WIPC;
set Revenue1.REV_MN_GSO_MAP Revenue1.REV_WIPC;
run;


***================================================================================================***
NOTE: Skip this part also if data for the same month with updated Anomaly/Mapping files is being run. 
	  Look for "SFDC IMPORT SKIPPED - CONTINUE HERE";
***================================================================================================***;
/*4.1 - SFDC FULL DATA EXTRACTION*/
PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Oppos1.RAW_OPP_SFDC AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT * FROM DM_GCH.Vw_sales2rev_opportunity);
QUIT;

PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Oppos1.RAW_CONTRACT_SFDC AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT * FROM SFDC.SF_CONTRACT
WHERE Status__C = 'Billing Review'
AND Status = 'Expired');
QUIT;

PROC SQL;
CONNECT TO ODBC AS myODBC(datasrc=ECDW_PROD user=DM_GCH password=intercall);
CREATE TABLE Oppos1.SF_OPPORTUNITYLINEITEM AS 
SELECT * FROM CONNECTION TO myODBC
(SELECT * FROM SFDC.SF_OPPORTUNITYLINEITEM);
QUIT;


/*5.1 - COPY data sets to working folder*/
data RevReal1.RAW_OPP_SFDC;
set Oppos1.RAW_OPP_SFDC;
run;

data RevReal1.RAW_CONTRACT_SFDC;
set Oppos1.RAW_CONTRACT_SFDC;
run;

***================================================================================================***
NOTE: "SFDC IMPORT SKIPPED - CONTINUE HERE";
***================================================================================================***;

data RevReal1.REV_MN_WIPC;
set Revenue1.REV_MN_WIPC;
run;


/*6.1 - Local MASTER COMPANY AND ENTITY MANAGMENT - Data Prep*/
PROC SQL;
CREATE TABLE RevReal1.COMP_ENT_MGMT1 AS
SELECT DISTINCT COMPANY_ID AS COMPANY_NUMBER, UPPER(COMPANY_NAME) AS COMPANY_NAME, ENTITY_CODE, 
UPPER(ENTITY_NAME) AS ENTITY_NAME, MONTH_START
FROM RevReal1.REV_MN_WIPC
WHERE COMPANY_ID NOT IS MISSING
ORDER BY COMPANY_ID, MONTH_START DESC
;
QUIT;

DATA RevReal1.COMP_ENT_MGMT2 (DROP=MONTH_START);
SET RevReal1.COMP_ENT_MGMT1;
BY COMPANY_NUMBER;
IF FIRST.COMPANY_NUMBER;
RUN;

PROC SQL;
CREATE TABLE RevReal1.COMP_ENT_MGMT3 AS
SELECT DISTINCT
(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE COMPANY_NUMBER END) AS COMPANY_NUMBER,
UPPER(COMPANY_NAME) AS COMPANY_NAME,
(CASE WHEN ENTITY_CODE IS MISSING THEN (CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE COMPANY_NUMBER END) ELSE ENTITY_CODE END) AS ENTITY_CODE,
(CASE WHEN UPPER(ENTITY_NAME) IS MISSING THEN UPPER(COMPANY_NAME) ELSE UPPER(ENTITY_NAME) END) AS ENTITY_NAME,
OPPORTUNITY_CLOSE_DATE
FROM RevReal1.RAW_OPP_SFDC
WHERE (CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE COMPANY_NUMBER END) NOT IS MISSING
AND (CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE COMPANY_NUMBER END) NOT IN (SELECT DISTINCT COMPANY_NUMBER FROM RevReal1.COMP_ENT_MGMT2)
AND year(datepart(OPPORTUNITY_CLOSE_DATE)) >= 2019 
ORDER BY (CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE COMPANY_NUMBER END), OPPORTUNITY_CLOSE_DATE DESC
;
QUIT;

DATA RevReal1.COMP_ENT_MGMT4 (DROP=OPPORTUNITY_CLOSE_DATE);
SET RevReal1.COMP_ENT_MGMT3;
BY COMPANY_NUMBER;
IF FIRST.COMPANY_NUMBER;
RUN;

PROC SQL;
CREATE TABLE RevReal1.COMP_ENT_MGMT AS
SELECT * FROM RevReal1.COMP_ENT_MGMT2
UNION
SELECT * FROM RevReal1.COMP_ENT_MGMT4;
QUIT;

/*6.2 - Local MASTER COMPANY AND ENTITY MANAGMENT - Update Revenue Table*/
PROC SQL;
CREATE TABLE RevReal1.REV_MN_WIPC_MGMT_0 AS 
SELECT
	TYPE,
	BU,
	LOB,
	b.ENTITY_CODE,
	b.ENTITY_NAME,
	COMPANY_ID,
	b.COMPANY_NAME,
	FINANCE_PRODUCT_DWH,
	CHARGE_TYPE,
	MONTH_START,
	WEST_BUSINESS_UNIT,
	CHARGE_CODE,
	CHARGE_DESC,
	CHARGE_CODE_TYPE,
	INV_CURR_CODE,
	SOURCEDATA,
	FINANCE_PRODUCT_GSO,
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	MINS,
	QTY,
	USD_REV,
	INV_REV
FROM RevReal1.REV_MN_WIPC a left join RevReal1.COMP_ENT_MGMT b on a.COMPANY_ID = b.COMPANY_NUMBER;
QUIT;

PROC SQL;
CREATE TABLE RevReal1.REV_MN_WIPC_MGMT AS 
	SELECT DISTINCT 
		TYPE,
		BU,
		LOB,
		(CASE WHEN ENTITY_CODE IS MISSING THEN COMPANY_ID ELSE ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN entity_name IS MISSING OR entity_name = 'NO ENTITY' THEN company_name ELSE entity_name END) AS ENTITY_NAME,
		COMPANY_ID,
		COMPANY_NAME,
		FINANCE_PRODUCT_DWH,
		CHARGE_TYPE,
		MONTH_START,
		WEST_BUSINESS_UNIT,
		CHARGE_CODE,
		CHARGE_DESC,
		CHARGE_CODE_TYPE,
		INV_CURR_CODE,
		SOURCEDATA,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		SUM(MINS) AS MINS,
		SUM(QTY) AS QTY,
		SUM(USD_REV) AS USD_REV,
		SUM(INV_REV) AS INV_REV
	FROM RevReal1.REV_MN_WIPC_MGMT_0
		GROUP BY
		TYPE,
		BU,
		LOB,
		(CASE WHEN ENTITY_CODE IS MISSING THEN COMPANY_ID ELSE ENTITY_CODE END),
		(CASE WHEN entity_name IS MISSING OR entity_name = 'NO ENTITY' THEN company_name ELSE entity_name END),
		COMPANY_ID,
		COMPANY_NAME,
		FINANCE_PRODUCT_DWH,
		CHARGE_TYPE,
		MONTH_START,
		WEST_BUSINESS_UNIT,
		CHARGE_CODE,
		CHARGE_DESC,
		CHARGE_CODE_TYPE,
		INV_CURR_CODE,
		SOURCEDATA,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE;
QUIT;




/*7.1 - OPPORTUNITY MAPPING TABLE LOADING*/
DATA Mapping1.PRODUCT_GSO_MAPPING;
    LENGTH
        OPPORTUNITY_PRODUCT_NAME $ 92
        FINANCE_PRODUCT_NAME $ 24
        ADDON_MAC_SUBSC  $ 12
        RECAST_TYPE      $ 10 ;
    FORMAT
        OPPORTUNITY_PRODUCT_NAME $CHAR92.
        FINANCE_PRODUCT_NAME $CHAR24.
        ADDON_MAC_SUBSC  $CHAR12.
        RECAST_TYPE      $CHAR10. ;
    INFORMAT
        OPPORTUNITY_PRODUCT_NAME $CHAR92.
        FINANCE_PRODUCT_NAME $CHAR24.
        ADDON_MAC_SUBSC  $CHAR12.
        RECAST_TYPE      $CHAR10. ;
    INFILE 'E:\SASDATA\RRAGA\SalesRealization\Dashboard Automation\Mapping\PRODUCT_GSO_Mapping.csv'
	delimiter=','
	firstobs=2
	lrecl = 32767
	MISSOVER
	DSD;
    INPUT
        OPPORTUNITY_PRODUCT_NAME : $CHAR92.
        FINANCE_PRODUCT_NAME : $CHAR24.
        ADDON_MAC_SUBSC  : $CHAR12.
        RECAST_TYPE      : $CHAR10. ;
RUN;


/*Closed Won Opportunity Data*/
/*8.1 - OPPORTUNITY TABLE - COMMITTED - NON-AUTO-RENEW*/
PROC SQL;
	CREATE TABLE RevReal1.CW_OPP_NONAR AS
	SELECT DISTINCT
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END) AS ENTITY_CODE,
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END) AS ENTITY_NAME,
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) AS COMPANY_NUMBER_NEW,
	B.COMPANY_NAME AS COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C AS TOTAL_CONTRACT_MRR_VARIANCE,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END) as CUSTOMER_TYPE,
	SUM (PRODUCT_TCV_USD) AS PRODUCT_TCV_USD,
	SUM(ANNUALIZED_AMOUNT_USD) AS PRODFAMACV
	FROM RevReal1.RAW_OPP_SFDC A LEFT JOIN RevReal1.COMP_ENT_MGMT B ON (CASE WHEN A.IP_COMPANY_NUMBER IS NOT MISSING THEN A.IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) = B.COMPANY_NUMBER
	LEFT JOIN Mapping1.PRODUCT_GSO_MAPPING C ON A.OPPORTUNITY_PRODUCT_NAME = C.OPPORTUNITY_PRODUCT_NAME

	WHERE A.OPPORTUNITY_STATUS = 'Closed Won'
	AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) >= '01-JAN-2019'D AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) <= INTNX ('MONTH', TODAY(), -1, 'E')
	AND C.FINANCE_PRODUCT_NAME IS NOT MISSING
	AND C.FINANCE_PRODUCT_NAME <> 'NON EC'
	AND PRODUCT_TCV_USD > 1
	AND A.TCV_CLASSIFICATION = 'Committed'
	GROUP BY
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END),
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END),
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END),
	B.COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END);
QUIT;


/*8.2 - OPPORTUNITY TABLE - COMMITTED - AUTO-RENEW*/

PROC SQL;
	CREATE TABLE RevReal1.CW_OPP_AR AS
	SELECT DISTINCT
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END) AS ENTITY_CODE,
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END) AS ENTITY_NAME,
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) AS COMPANY_NUMBER_NEW,
	B.COMPANY_NAME AS COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C AS TOTAL_CONTRACT_MRR_VARIANCE,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END) as CUSTOMER_TYPE,
	SUM (PRODUCT_TCV_USD) AS PRODUCT_TCV_USD,
	SUM(ANNUALIZED_AMOUNT_USD) AS PRODFAMACV
	FROM RevReal1.RAW_OPP_SFDC A LEFT JOIN RevReal1.COMP_ENT_MGMT B ON (CASE WHEN A.IP_COMPANY_NUMBER IS NOT MISSING THEN A.IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) = B.COMPANY_NUMBER
	LEFT JOIN Mapping1.PRODUCT_GSO_MAPPING C ON A.OPPORTUNITY_PRODUCT_NAME = C.OPPORTUNITY_PRODUCT_NAME
	JOIN (SELECT DISTINCT STARTDATE, OPPORTUNITY__C FROM RevReal1.RAW_CONTRACT_SFDC) D on a.OPPORTUNITYID = D.OPPORTUNITY__C
	WHERE A.OPPORTUNITY_STATUS = 'Closed Won'
	AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) >= '01-JAN-2019'D AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) <= INTNX ('MONTH', TODAY(), -1, 'E')
	AND C.FINANCE_PRODUCT_NAME IS NOT MISSING
	AND C.FINANCE_PRODUCT_NAME <> 'NON EC'
	AND PRODUCT_TCV_USD > 1
	AND A.TCV_CLASSIFICATION = 'Committed'
	GROUP BY
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END),
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END),
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END),
	B.COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END);
QUIT;

/*8.3 - COMBINE NON-AUTO-RENEW and AUTO-RENEW*/
data RevReal1.CW_OPP_NONAR_AR;
set RevReal1.CW_OPP_NONAR RevReal1.CW_OPP_AR;
run;

/*8.4 - TOTAL_CONTRACT_VARIANCE Calculation*/
PROC SQL;
   CREATE TABLE RevReal1.OPP_NAME_TCV AS 
   SELECT OPPORTUNITY_NAME, (SUM(PRODUCT_TCV_USD)) AS OPP_NAME_TCV
      FROM RevReal1.CW_OPP_NONAR_AR
	  GROUP BY OPPORTUNITY_NAME;
QUIT;

PROC SQL;
   CREATE TABLE RevReal1.CW_OPP AS 
   SELECT a.*, b.OPP_NAME_TCV, (a.PRODUCT_TCV_USD/b.OPP_NAME_TCV) as OPP_NAME_TCV_PROP, (TOTAL_CONTRACT_MRR_VARIANCE*(a.PRODUCT_TCV_USD/b.OPP_NAME_TCV)) AS TOTAL_CONTRACT_VARIANCE
      FROM RevReal1.CW_OPP_NONAR_AR a join RevReal1.OPP_NAME_TCV b on a.OPPORTUNITY_NAME = b.OPPORTUNITY_NAME;
QUIT;


/*8.5 - OPPORTUNITY TABLE - UNCOMMITTED*/
/*NOTE: RevReal1.UNCOMMITTED_OPPS was "RevReal1.cw_uncommitted_opp" before.*/
PROC SQL;
	CREATE TABLE RevReal1.UNCOMMITTED_OPPS AS
	SELECT DISTINCT
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END) AS ENTITY_CODE,
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END) AS ENTITY_NAME,
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) AS COMPANY_NUMBER_NEW,
	B.COMPANY_NAME AS COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C AS TOTAL_CONTRACT_MRR_VARIANCE,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END) as CUSTOMER_TYPE,
	SUM (PRODUCT_TCV_USD) AS PRODUCT_TCV_USD,
	SUM(ANNUALIZED_AMOUNT_USD) AS PRODFAMACV
	FROM RevReal1.RAW_OPP_SFDC A LEFT JOIN RevReal1.COMP_ENT_MGMT B ON (CASE WHEN A.IP_COMPANY_NUMBER IS NOT MISSING THEN A.IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END) = B.COMPANY_NUMBER
	LEFT JOIN Mapping1.PRODUCT_GSO_MAPPING C ON A.OPPORTUNITY_PRODUCT_NAME = C.OPPORTUNITY_PRODUCT_NAME

	WHERE A.OPPORTUNITY_STATUS = 'Closed Won'
	AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) >= '01-JAN-2019'D AND DATEPART(A.OPPORTUNITY_CLOSE_DATE) <= INTNX ('MONTH', TODAY(), -1, 'E')
	AND C.FINANCE_PRODUCT_NAME IS NOT MISSING
	AND C.FINANCE_PRODUCT_NAME <> 'NON EC'
	AND PRODUCT_TCV_USD > 1
	AND (TCV_CLASSIFICATION  <> 'Committed' OR TCV_CLASSIFICATION IS NULL)
	GROUP BY
	(CASE WHEN B.ENTITY_CODE IS MISSING THEN B.COMPANY_NUMBER ELSE B.ENTITY_CODE END),
	(CASE WHEN B.ENTITY_NAME IS MISSING OR B.ENTITY_NAME = 'NO ENTITY' THEN B.COMPANY_NAME ELSE B.ENTITY_NAME END),
	A.COMPANY_NUMBER,
	(CASE WHEN IP_COMPANY_NUMBER IS NOT MISSING THEN IP_COMPANY_NUMBER ELSE A.COMPANY_NUMBER END),
	B.COMPANY_NAME,
	A.OPPORTUNITYID,
	A.DURATION,
	A.CONTRACT_START_DATE,
	A.OPPORTUNITY_CLOSE_DATE,
	A.OPPORTUNITY_CREATE_DATE,
	A.OPP_SALES_MOTION,
	A.OPP_SALES_MOTION_CONVERTED,
	A.LINE_SALES_MOTION,
	A.LINE_MOTION_DETAIL,
	A.OPPORTUNITY_NAME,
	A.WEST_BUSINESS_UNIT,
	A.OPPORTUNITY_PRODUCT_NAME,
	C.FINANCE_PRODUCT_NAME,
	C.ADDON_MAC_SUBSC,
	C.RECAST_TYPE,
	A.TCV_CLASSIFICATION,
	A.TIMEFRAME,
	A.TOTAL_CONTRACT_MRR_VARIANCE__C,
	(CASE WHEN WHOLESALE__C = 1 THEN 'Wholesale' ELSE 'Retail' END);
QUIT;


/*9.1 - REVENUE TABLE - DATA PREP*/
proc sql; 
	create table RevReal1.REV_MN_WIPC_MGMT_2019up as select * 
	from RevReal1.REV_MN_WIPC_MGMT where year(datepart(MONTH_START)) >= 2019;
quit;

proc sql;
	create table RevReal1.rev as select distinct
	(CASE WHEN b.ENTITY_CODE IS MISSING THEN b.company_number ELSE b.ENTITY_CODE END) AS ENTITY_CODE,
	(CASE WHEN b.entity_name IS MISSING OR b.entity_name = 'NO ENTITY' THEN b.company_name ELSE b.entity_name END) AS ENTITY_NAME,
	COMPANY_ID,
	b.COMPANY_NAME,
	WEST_BUSINESS_UNIT,
	SOURCEDATA,
	(case when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Add-On' THEN 'Professional Services IP'
		  when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Subscription' THEN 'Hosted Voice'
		  else FINANCE_PRODUCT_GSO end) as FINANCE_PRODUCT_GSO,
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	datepart(MONTH_START) as BillMonth format mmddyy10.,
	SUM(USD_REV) AS USD_REV
	FROM RevReal1.REV_MN_WIPC_MGMT_2019up a left join RevReal1.COMP_ENT_MGMT b on a.COMPANY_ID = b.COMPANY_NUMBER
	WHERE (case when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Add-On' THEN 'Professional Services IP'
		  when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Subscription' THEN 'Hosted Voice'
		  else FINANCE_PRODUCT_GSO end) IS NOT NULL
	GROUP BY
	(CASE WHEN b.ENTITY_CODE IS MISSING THEN b.company_number ELSE b.ENTITY_CODE END),
	(CASE WHEN b.entity_name IS MISSING OR b.entity_name = 'NO ENTITY' THEN b.company_name ELSE b.entity_name END),
	COMPANY_ID,
	b.COMPANY_NAME,
	WEST_BUSINESS_UNIT,
	SOURCEDATA,
	(case when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Add-On' THEN 'Professional Services IP'
	  when SOURCEDATA = 'WIPC' and FINANCE_PRODUCT_GSO = 'Other' AND ADDON_MAC_SUBSC = 'Subscription' THEN 'Hosted Voice'
	  else FINANCE_PRODUCT_GSO end),
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	datepart(MONTH_START)
	ORDER BY
	ENTITY_CODE,
	ENTITY_NAME,
	COMPANY_ID,
	COMPANY_NAME,
	WEST_BUSINESS_UNIT,
	SOURCEDATA,
	FINANCE_PRODUCT_GSO,
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	datepart(MONTH_START)
;
quit;

/*REVENUE TABLE - DATA PREP*/
/*CODE MIGRATION: When converting to Python, use df.unstack(). 
If that doesn't work, change this to case when statements, then aggregate.
Consider only revenue stating 2020*/
PROC TRANSPOSE DATA = RevReal1.REV OUT = RevReal1.REV_TRANS_0;
	BY  ENTITY_CODE
	ENTITY_NAME
	COMPANY_ID
	COMPANY_NAME
	WEST_BUSINESS_UNIT
	SOURCEDATA
	FINANCE_PRODUCT_GSO
	ADDON_MAC_SUBSC
	RECAST_TYPE
	;
	ID BILLMONTH;
	VAR USD_REV;
RUN;

/*REVENUE TABLE - DATA PREP*/
DATA RevReal1.REV_TRANS;
 	SET RevReal1.REV_TRANS_0;
	IF MISSING(_02_01_2021) THEN _02_01_2021= 0;
	IF MISSING(_03_01_2021) THEN _03_01_2021= 0;
	IF MISSING(_04_01_2021) THEN _04_01_2021= 0;
	IF MISSING(_05_01_2021) THEN _05_01_2021= 0;
	IF MISSING(_06_01_2021) THEN _06_01_2021= 0;
	IF MISSING(_07_01_2021) THEN _07_01_2021= 0;
	IF MISSING(_08_01_2021) THEN _08_01_2021= 0;
	IF MISSING(_09_01_2021) THEN _09_01_2021= 0;
	IF MISSING(_10_01_2021) THEN _10_01_2021= 0;
	IF MISSING(_11_01_2021) THEN _11_01_2021= 0;
	IF MISSING(_12_01_2021) THEN _12_01_2021= 0;
	IF MISSING(_01_01_2022) THEN _01_01_2022= 0;
	IF MISSING(_02_01_2022) THEN _02_01_2022= 0;
	IF MISSING(_03_01_2022) THEN _03_01_2022= 0;
	IF MISSING(_04_01_2022) THEN _04_01_2022= 0;
	IF MISSING(_05_01_2022) THEN _05_01_2022= 0;
	IF MISSING(_06_01_2022) THEN _06_01_2022= 0;
	IF MISSING(_07_01_2022) THEN _07_01_2022= 0;
	IF MISSING(_08_01_2022) THEN _08_01_2022= 0;
	IF MISSING(_09_01_2022) THEN _09_01_2022= 0;
	IF MISSING(_10_01_2022) THEN _10_01_2022= 0;
	IF MISSING(_11_01_2022) THEN _11_01_2022= 0;
	IF MISSING(_12_01_2022) THEN _12_01_2022= 0;
RUN;


/*10.1.1 - JOINING OPP AND REVENUE - ITER-1*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER1 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,
/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.ENTITY_CODE as OPP_ENTITY_CODE,
		opp.ENTITY_NAME as OPP_ENTITY_NAME,
		opp.COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_NEW,
		opp.COMPANY_NAME as OPP_COMPANY_NAME,
		opp.OPPORTUNITYID as OPP_OPPORTUNITYID,
		opp.DURATION as OPP_DURATION,
		opp.CONTRACT_START_DATE as OPP_CONTRACT_START_DATE,
		opp.OPPORTUNITY_CLOSE_DATE as OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPPORTUNITY_CREATE_DATE as OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_SALES_MOTION as OPP_OPP_SALES_MOTION,
		opp.OPP_SALES_MOTION_CONVERTED as OPP_OPP_SALES_MOTION_CONVERTED,
		opp.LINE_SALES_MOTION as OPP_LINE_SALES_MOTION,
		opp.LINE_MOTION_DETAIL as OPP_LINE_MOTION_DETAIL,
		opp.OPPORTUNITY_NAME as OPP_OPPORTUNITY_NAME,
		opp.WEST_BUSINESS_UNIT as OPP_WEST_BUSINESS_UNIT,
		opp.OPPORTUNITY_PRODUCT_NAME as OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME,
		opp.ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC,
		opp.RECAST_TYPE as OPP_RECAST_TYPE,
		opp.TCV_CLASSIFICATION as OPP_TCV_CLASSIFICATION,
		opp.Product_TCV_USD as OPP_Product_TCV_USD,
		opp.ProdFamACV as OPP_ProdFamACV,
		opp.TIMEFRAME as OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
/*FOR Charina: Corresponding code in Python with issue*/
	(CASE WHEN COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,
		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.CW_OPP opp
		ON rev.company_id = opp.company_number_new
		AND rev.finance_product_gso = opp.FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.RECAST_TYPE)
		ORDER BY opp.OPPORTUNITYID, opp.FINANCE_PRODUCT_NAME, opp.OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.1.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-1*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I1 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		  t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER1 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.1.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File1 Instead as Static File in GCP*/

/*10.1.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I1 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_1 t1;
QUIT;

/*10.1.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I1 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I1 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I1 t2
	  on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_FINANCE_PRODUCT_NAME = t2.FINANCE_PRODUCT_NAME
	  	and t1.OPP_ADDON_MAC_SUBSC = t2.ADDON_MAC_SUBSC
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_RECAST_TYPE = t2.RECAST_TYPE
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME
		and t1.OPP_OPPORTUNITY_NAME = t2.OPPORTUNITY_NAME
		and t1.OPP_LINE_SALES_MOTION = t2.LINE_SALES_MOTION
		and t1.OPP_LINE_MOTION_DETAIL = t2.LINE_MOTION_DETAIL
		and t1.OPP_Product_TCV_USD = t2.Product_TCV_USD;
QUIT;

/*10.2.1 - JOINING OPP AND REVENUE - ITER-2*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER2 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I1 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.2.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-2*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I2 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER2 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.2.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File2 Instead as Static File in GCP*/

/*10.2.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I2 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,		
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_2 t1;
QUIT;

/*10.2.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I2 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I2 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I2 t2
	    on STRIP(t1.OPP_COMPANY_NUMBER_NEW) = STRIP(t2.COMPANY_NUMBER)
		and STRIP(t1.OPP_OPPORTUNITYID) = STRIP(t2.OPPORTUNITYID)
		and STRIP(t1.OPP_OPPORTUNITY_PRODUCT_NAME) = STRIP(t2.OPPORTUNITY_PRODUCT_NAME);
QUIT;

/*10.3.1 - JOINING OPP AND REVENUE - ITER-3*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER3 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I2 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;



/*10.3.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-3*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I3 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER3 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.3.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File3 Instead as Static File in GCP*/

/*10.3.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I3 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_3 t1;
QUIT;

/*10.3.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I3 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,
		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I3 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I3 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.4.1 - JOINING OPP AND REVENUE - ITER-4*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER4 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I3 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.4.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-4*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I4 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER4 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.4.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File4 Instead as Static File in GCP*/

/*10.4.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I4 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_4 t1;
QUIT;

/*10.4.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I4 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I4 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I4 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.5.1 - JOINING OPP AND REVENUE - ITER-5*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER5 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I4 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.5.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-5*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I5 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER5 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.5.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File5 Instead as Static File in GCP*/

/*10.5.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I5 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_5 t1;
QUIT;

/*10.5.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I5 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I5 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I5 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.6.1 - JOINING OPP AND REVENUE - ITER-6*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER6 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I5 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.6.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-6*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I6 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER6 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.6.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File6 Instead as Static File in GCP*/

/*10.6.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I6 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_6 t1;
QUIT;

/*10.6.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I6 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I6 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I6 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.7.1 - JOINING OPP AND REVENUE - ITER-7*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER7 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I6 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*10.7.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-7*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I7 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER7 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.7.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File7 Instead as Static File in GCP*/

/*10.7.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I7 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_7 t1;
QUIT;

/*10.7.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I7 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I7 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I7 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.8.1 - JOINING OPP AND REVENUE - ITER-8*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER8 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I7 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.8.2 - UNMATCHED_OPPS_FOR_REMATCH - ITER-8*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I8 AS 
   SELECT distinct t1.OPP_ENTITY_CODE, 
          t1.OPP_ENTITY_NAME, 
          t1.OPP_COMPANY_NUMBER_NEW, 
          t1.OPP_COMPANY_NAME, 
          t1.OPP_OPPORTUNITYID, 
          t1.OPP_DURATION, 
          t1.OPP_CONTRACT_START_DATE, 
          t1.OPP_OPPORTUNITY_CLOSE_DATE, 
          t1.OPP_OPPORTUNITY_CREATE_DATE, 
          t1.OPP_OPP_SALES_MOTION, 
          t1.OPP_OPP_SALES_MOTION_CONVERTED, 
          t1.OPP_LINE_SALES_MOTION, 
          t1.OPP_LINE_MOTION_DETAIL, 
          t1.OPP_OPPORTUNITY_NAME, 
          t1.OPP_WEST_BUSINESS_UNIT, 
          t1.OPP_OPPORTUNITY_PRODUCT_NAME, 
          t1.OPP_FINANCE_PRODUCT_NAME, 
          t1.OPP_ADDON_MAC_SUBSC, 
          t1.OPP_RECAST_TYPE, 
          t1.OPP_TCV_CLASSIFICATION, 
          t1.OPP_Product_TCV_USD, 
          t1.OPP_ProdFamACV, 
          t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		  t1.CUSTOMER_TYPE
      FROM RevReal1.OPP_REV_COMB_ITER8 t1
      WHERE t1.OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE';
QUIT;

/*10.8.3 - Import ANOMALY_OPPS_FOR_REMATCH*/
/*Copy Anomaly File8 Instead as Static File in GCP*/

/*10.8.4 - ANOMALY_OPPS_FOR_REMATCH*/
PROC SQL;
   CREATE TABLE RevReal1.ANOMALY_OPPS_FOR_REMATCH_I8 AS 
   SELECT   distinct COMPANY_NUMBER,
			COMPANY_NAME,
			ENTITY_NAME,
			OPPORTUNITYID,
			LINE_SALES_MOTION,
			LINE_MOTION_DETAIL,
			OPPORTUNITY_NAME,
			OPPORTUNITY_PRODUCT_NAME,
			FINANCE_PRODUCT_NAME,
			ADDON_MAC_SUBSC,
			RECAST_TYPE,
			TCV_CLASSIFICATION,
			Product_TCV_USD,
			ProdFamACV,
			UNMATCH_REASON,
			GSO_New_Company_Number,
			GSO_FINANCE_PRODUCT_NAME,
			GSO_ADDON_MAC_SUBSC,
			GSO_RECAST_TYPE,
			GSO_Special_Wholesale_Flag,
			GSO_Notes
      FROM Anomaly1.ANOMALY_OPPS_ITER_8 t1;
QUIT;

/*10.8.5 - MAP ANOMALIES TO UNMAPPED OPPORTUNITIES*/
PROC SQL;
   CREATE TABLE RevReal1.UNMATCHED_ANOMALY_I8 AS 
   SELECT distinct  
		t1.OPP_ENTITY_CODE, 
		t1.OPP_ENTITY_NAME,
		(CASE WHEN t2.GSO_New_Company_Number NOT IN ('', '.') THEN t2.GSO_New_Company_Number ELSE t1.OPP_COMPANY_NUMBER_NEW END) AS OPP_COMPANY_NUMBER_NEW, 
		t1.OPP_COMPANY_NAME, 
		t1.OPP_OPPORTUNITYID, 
		t1.OPP_DURATION, 
		t1.OPP_CONTRACT_START_DATE, 
		t1.OPP_OPPORTUNITY_CLOSE_DATE, 
		t1.OPP_OPPORTUNITY_CREATE_DATE, 
		t1.OPP_OPP_SALES_MOTION, 
		t1.OPP_OPP_SALES_MOTION_CONVERTED, 
		t1.OPP_LINE_SALES_MOTION, 
		t1.OPP_LINE_MOTION_DETAIL, 
		t1.OPP_OPPORTUNITY_NAME, 
		t1.OPP_WEST_BUSINESS_UNIT, 
		t1.OPP_OPPORTUNITY_PRODUCT_NAME,
		(CASE WHEN t2.GSO_FINANCE_PRODUCT_NAME IS NOT MISSING THEN t2.GSO_FINANCE_PRODUCT_NAME ELSE t1.OPP_FINANCE_PRODUCT_NAME END) AS OPP_FINANCE_PRODUCT_NAME,
 		(CASE WHEN t2.GSO_ADDON_MAC_SUBSC IS NOT MISSING THEN t2.GSO_ADDON_MAC_SUBSC ELSE t1.OPP_ADDON_MAC_SUBSC END) AS OPP_ADDON_MAC_SUBSC,
		(CASE WHEN t2.GSO_RECAST_TYPE IS NOT MISSING THEN t2.GSO_RECAST_TYPE ELSE t1.OPP_RECAST_TYPE END) AS OPP_RECAST_TYPE,
		t1.OPP_TCV_CLASSIFICATION, 
		t1.OPP_Product_TCV_USD, 
		t1.OPP_ProdFamACV, 
		t1.OPP_TIMEFRAME,
		t1.TOTAL_CONTRACT_VARIANCE,
		t1.CUSTOMER_TYPE,

		t1.OPP_COMPANY_NUMBER_NEW as OPP_COMPANY_NUMBER_OLD, 
		t1.OPP_FINANCE_PRODUCT_NAME as OPP_FINANCE_PRODUCT_NAME_OLD, 
		t1.OPP_ADDON_MAC_SUBSC as OPP_ADDON_MAC_SUBSC_OLD, 
		t1.OPP_RECAST_TYPE AS OPP_RECAST_TYPE_OLD,
		t2.UNMATCH_REASON,
		t2.GSO_New_Company_Number,
		t2.GSO_FINANCE_PRODUCT_NAME,
		t2.GSO_ADDON_MAC_SUBSC,
		t2.GSO_RECAST_TYPE,
		t2.GSO_Special_Wholesale_Flag,
		t2.GSO_Notes

      FROM RevReal1.UNMATCHED_OPPS_FOR_REMATCH_I8 t1 left join RevReal1.ANOMALY_OPPS_FOR_REMATCH_I8 t2
	    on t1.OPP_COMPANY_NUMBER_NEW = t2.COMPANY_NUMBER
		and t1.OPP_OPPORTUNITYID = t2.OPPORTUNITYID
		and t1.OPP_OPPORTUNITY_PRODUCT_NAME = t2.OPPORTUNITY_PRODUCT_NAME;
QUIT;

/*10.9.1 - JOINING OPP AND REVENUE - ITER-9*/
proc sql;
		create table RevReal1.OPP_REV_COMB_ITER9 as
		select distinct
		rev.ENTITY_CODE as REV_ENTITY_CODE,
		rev.ENTITY_NAME as REV_ENTITY_NAME,
		rev.COMPANY_ID as REV_COMPANY_ID,
		rev.COMPANY_NAME as REV_COMPANY_NAME,
		rev.WEST_BUSINESS_UNIT as REV_WEST_BUSINESS_UNIT,
		rev.SOURCEDATA as REV_SOURCEDATA,
		rev.FINANCE_PRODUCT_GSO as REV_FINANCE_PRODUCT_GSO,
		rev.ADDON_MAC_SUBSC as REV_ADDON_MAC_SUBSC,
		rev.RECAST_TYPE as REV_RECAST_TYPE,

		/*CODE MIGRATION: Fillna with 0*/
		(case when rev._01_01_2019 = . then 0 else rev._01_01_2019 end) as Jan2019Rev,
		(case when rev._02_01_2019 = . then 0 else rev._02_01_2019 end) as Feb2019Rev,
		(case when rev._03_01_2019 = . then 0 else rev._03_01_2019 end) as Mar2019Rev,
		(case when rev._04_01_2019 = . then 0 else rev._04_01_2019 end) as Apr2019Rev,
		(case when rev._05_01_2019 = . then 0 else rev._05_01_2019 end) as May2019Rev,
		(case when rev._06_01_2019 = . then 0 else rev._06_01_2019 end) as Jun2019Rev,
		(case when rev._07_01_2019 = . then 0 else rev._07_01_2019 end) as Jul2019Rev,
		(case when rev._08_01_2019 = . then 0 else rev._08_01_2019 end) as Aug2019Rev,
		(case when rev._09_01_2019 = . then 0 else rev._09_01_2019 end) as Sep2019Rev,
		(case when rev._10_01_2019 = . then 0 else rev._10_01_2019 end) as Oct2019Rev,
		(case when rev._11_01_2019 = . then 0 else rev._11_01_2019 end) as Nov2019Rev,
		(case when rev._12_01_2019 = . then 0 else rev._12_01_2019 end) as Dec2019Rev,

		(case when rev._01_01_2020 = . then 0 else rev._01_01_2020 end) as Jan2020Rev,
		(case when rev._02_01_2020 = . then 0 else rev._02_01_2020 end) as Feb2020Rev,
		(case when rev._03_01_2020 = . then 0 else rev._03_01_2020 end) as Mar2020Rev,
		(case when rev._04_01_2020 = . then 0 else rev._04_01_2020 end) as Apr2020Rev,
		(case when rev._05_01_2020 = . then 0 else rev._05_01_2020 end) as May2020Rev,
		(case when rev._06_01_2020 = . then 0 else rev._06_01_2020 end) as Jun2020Rev,
		(case when rev._07_01_2020 = . then 0 else rev._07_01_2020 end) as Jul2020Rev,
		(case when rev._08_01_2020 = . then 0 else rev._08_01_2020 end) as Aug2020Rev,
		(case when rev._09_01_2020 = . then 0 else rev._09_01_2020 end) as Sep2020Rev,
		(case when rev._10_01_2020 = . then 0 else rev._10_01_2020 end) as Oct2020Rev,
		(case when rev._11_01_2020 = . then 0 else rev._11_01_2020 end) as Nov2020Rev,
		(case when rev._12_01_2020 = . then 0 else rev._12_01_2020 end) as Dec2020Rev,

		(case when rev._01_01_2021 = . then 0 else rev._01_01_2021 end) as Jan2021Rev,
		(case when rev._02_01_2021 = . then 0 else rev._02_01_2021 end) as Feb2021Rev,
		(case when rev._03_01_2021 = . then 0 else rev._03_01_2021 end) as Mar2021Rev,
		(case when rev._04_01_2021 = . then 0 else rev._04_01_2021 end) as Apr2021Rev,
		(case when rev._05_01_2021 = . then 0 else rev._05_01_2021 end) as May2021Rev,
		(case when rev._06_01_2021 = . then 0 else rev._06_01_2021 end) as Jun2021Rev,
		(case when rev._07_01_2021 = . then 0 else rev._07_01_2021 end) as Jul2021Rev,
		(case when rev._08_01_2021 = . then 0 else rev._08_01_2021 end) as Aug2021Rev,
		(case when rev._09_01_2021 = . then 0 else rev._09_01_2021 end) as Sep2021Rev,
		(case when rev._10_01_2021 = . then 0 else rev._10_01_2021 end) as Oct2021Rev,
		(case when rev._11_01_2021 = . then 0 else rev._11_01_2021 end) as Nov2021Rev,
		(case when rev._12_01_2021 = . then 0 else rev._12_01_2021 end) as Dec2021Rev,

		(case when rev._01_01_2022 = . then 0 else rev._01_01_2022 end) as Jan2022Rev,
		(case when rev._02_01_2022 = . then 0 else rev._02_01_2022 end) as Feb2022Rev,
		(case when rev._03_01_2022 = . then 0 else rev._03_01_2022 end) as Mar2022Rev,
		(case when rev._04_01_2022 = . then 0 else rev._04_01_2022 end) as Apr2022Rev,
		(case when rev._05_01_2022 = . then 0 else rev._05_01_2022 end) as May2022Rev,
		(case when rev._06_01_2022 = . then 0 else rev._06_01_2022 end) as Jun2022Rev,
		(case when rev._07_01_2022 = . then 0 else rev._07_01_2022 end) as Jul2022Rev,
		(case when rev._08_01_2022 = . then 0 else rev._08_01_2022 end) as Aug2022Rev,
		(case when rev._09_01_2022 = . then 0 else rev._09_01_2022 end) as Sep2022Rev,
		(case when rev._10_01_2022 = . then 0 else rev._10_01_2022 end) as Oct2022Rev,
		(case when rev._11_01_2022 = . then 0 else rev._11_01_2022 end) as Nov2022Rev,
		(case when rev._12_01_2022 = . then 0 else rev._12_01_2022 end) as Dec2022Rev,

		opp.OPP_ENTITY_CODE,
		opp.OPP_ENTITY_NAME,
		opp.OPP_COMPANY_NUMBER_NEW,
		opp.OPP_COMPANY_NAME,
		opp.OPP_OPPORTUNITYID,
		opp.OPP_DURATION,
		opp.OPP_CONTRACT_START_DATE,
		opp.OPP_OPPORTUNITY_CLOSE_DATE,
		opp.OPP_OPPORTUNITY_CREATE_DATE,
		opp.OPP_OPP_SALES_MOTION,
		opp.OPP_OPP_SALES_MOTION_CONVERTED,
		opp.OPP_LINE_SALES_MOTION,
		opp.OPP_LINE_MOTION_DETAIL,
		opp.OPP_OPPORTUNITY_NAME,
		opp.OPP_WEST_BUSINESS_UNIT,
		opp.OPP_OPPORTUNITY_PRODUCT_NAME,
		opp.OPP_FINANCE_PRODUCT_NAME,
		opp.OPP_ADDON_MAC_SUBSC,
		opp.OPP_RECAST_TYPE,
		opp.OPP_TCV_CLASSIFICATION,
		opp.OPP_Product_TCV_USD,
		opp.OPP_ProdFamACV,
		opp.OPP_TIMEFRAME,
		opp.TOTAL_CONTRACT_VARIANCE,
		opp.CUSTOMER_TYPE,
		opp.UNMATCH_REASON,
		opp.GSO_New_Company_Number,
		opp.GSO_FINANCE_PRODUCT_NAME,
		opp.GSO_ADDON_MAC_SUBSC,
		opp.GSO_RECAST_TYPE,
		opp.GSO_Special_Wholesale_Flag,
		opp.GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,


		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND (opp.OPP_COMPANY_NUMBER_NEW = rev.COMPANY_ID) AND (rev.FINANCE_PRODUCT_GSO=opp.OPP_FINANCE_PRODUCT_NAME) AND (rev.ADDON_MAC_SUBSC=opp.OPP_ADDON_MAC_SUBSC) AND (rev.RECAST_TYPE=opp.OPP_RECAST_TYPE) THEN 'OPP_MATCHED_TO_REVENUE' 
		WHEN OPP_COMPANY_NUMBER_NEW IS NOT MISSING AND rev.COMPANY_ID IS MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS MISSING AND OPP_OPPORTUNITYID IS NOT MISSING THEN 'OPP_UNMATCHED_TO_REVENUE'
		WHEN OPP_COMPANY_NUMBER_NEW IS MISSING AND rev.COMPANY_ID IS NOT MISSING THEN 'REVENUE_UNMATCHED_TO_OPP' END) AS OPP_REVENUE_MATCH,

		(CASE WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_REV_COMP_NUM_MISSING' 
		WHEN rev.COMPANY_ID IS NOT MISSING and opp.OPP_COMPANY_NUMBER_NEW IS MISSING THEN 'OPP_COMP_NUM_MISSING'
		WHEN rev.COMPANY_ID IS MISSING and opp.OPP_COMPANY_NUMBER_NEW IS NOT MISSING THEN 'REV_COMP_NUM_MISSING'
		ELSE 'OPP_REV_COMP_NUM_NOT_MISSING' END) AS COMPANY_NUMBER_STATUS

		from RevReal1.rev_trans rev full outer join RevReal1.UNMATCHED_ANOMALY_I8 opp
		ON rev.company_id = opp.OPP_COMPANY_NUMBER_NEW
		AND rev.finance_product_gso = opp.OPP_FINANCE_PRODUCT_NAME
		AND strip(rev.ADDON_MAC_SUBSC) = strip(opp.OPP_ADDON_MAC_SUBSC)
		AND strip(rev.RECAST_TYPE) = strip(opp.OPP_RECAST_TYPE)
		ORDER BY opp.OPP_OPPORTUNITYID, opp.OPP_FINANCE_PRODUCT_NAME, opp.OPP_OPPORTUNITY_PRODUCT_NAME;
QUIT;


/*EDIT: Add parts of iteration and next Iteration when new anomaly files are received from Shaun*/

/*10.8 Opps with no company revenue*/

*EDIT: Change table "RevReal1.OPP_REV_COMB_ITER#" based on latest table;
%let iter_table = RevReal1.OPP_REV_COMB_ITER9;

PROC SQL;
   	CREATE TABLE RevReal1.OPP_UNMATCHED_NO_COMP_REVENUE AS 
   	SELECT DISTINCT a.OPP_COMPANY_NUMBER_NEW
      	FROM (SELECT DISTINCT OPP_COMPANY_NUMBER_NEW FROM &iter_table WHERE OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE' 
			AND COMPANY_NUMBER_STATUS = 'REV_COMP_NUM_MISSING') a
	FULL OUTER JOIN (SELECT DISTINCT COMPANY_ID FROM RevReal1.REV_TRANS) b ON a.OPP_COMPANY_NUMBER_NEW = b.COMPANY_ID
	WHERE a.OPP_COMPANY_NUMBER_NEW NOT IS MISSING AND b.COMPANY_ID IS MISSING;
QUIT;

/*10.9 - OPP_REV_COMBINED_FOR_DASH*/
*EDIT: Add latest iteration table # minus 1;
data RevReal1.OPP_REV_COMBINED;
set RevReal1.OPP_REV_COMB_ITER1 RevReal1.OPP_REV_COMB_ITER2 RevReal1.OPP_REV_COMB_ITER3 RevReal1.OPP_REV_COMB_ITER4 
	RevReal1.OPP_REV_COMB_ITER5 RevReal1.OPP_REV_COMB_ITER6 RevReal1.OPP_REV_COMB_ITER7 RevReal1.OPP_REV_COMB_ITER8
/*	RevReal1.OPP_REV_COMB_ITER# */
	&iter_table;
run;

/*10.10 - UNION OF MATCHED AND UN-MATCHED*/
PROC SQL;
   CREATE TABLE RevReal1.OPP_REV_COMBINED_FOR_DASH AS
/*ITEM1 - MATCHED*/
SELECT distinct
		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS MISSING THEN REV_COMPANY_ID ELSE OPP_COMPANY_NUMBER_NEW END) AS COMPANY_NUMBER,
		(CASE WHEN OPP_COMPANY_NAME IS MISSING THEN REV_COMPANY_NAME ELSE OPP_COMPANY_NAME END) AS COMPANY_NAME,
		(CASE WHEN OPP_ENTITY_CODE IS MISSING THEN REV_ENTITY_CODE ELSE OPP_ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN OPP_ENTITY_NAME IS MISSING THEN REV_ENTITY_NAME ELSE OPP_ENTITY_NAME END) AS ENTITY_NAME,

		(CASE WHEN OPP_OPPORTUNITYID IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITYID END) AS OPPORTUNITYID,
		(CASE WHEN OPP_DURATION IS MISSING THEN 0 ELSE OPP_DURATION END) AS OPP_DURATION,
		datepart(OPP_CONTRACT_START_DATE) as OPP_CONTRACT_START_DATE format mmddyy10.,
		datepart(OPP_OPPORTUNITY_CLOSE_DATE) as OPPORTUNITY_CLOSE_DATE format mmddyy10.,
		YEAR(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_YEAR,
		MONTH(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_MONTH,
		datepart(OPP_OPPORTUNITY_CREATE_DATE) as OPPORTUNITY_CREATE_DATE format mmddyy10.,		

		(CASE WHEN OPP_OPP_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION END) AS OPP_SALES_MOTION,
		(CASE WHEN OPP_OPP_SALES_MOTION_CONVERTED IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION_CONVERTED END) AS OPP_SALES_MOTION_CONVERTED,
		(CASE WHEN OPP_LINE_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_LINE_SALES_MOTION END) AS OPP_LINE_SALES_MOTION,
		(CASE WHEN OPP_LINE_MOTION_DETAIL IS MISSING THEN 'N/A' ELSE OPP_LINE_MOTION_DETAIL END) AS OPP_LINE_MOTION_DETAIL,
		(CASE WHEN OPP_OPPORTUNITY_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_NAME END) AS OPPORTUNITY_NAME,
		(CASE WHEN OPP_OPPORTUNITY_PRODUCT_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_PRODUCT_NAME END) AS OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,

		(CASE WHEN OPP_FINANCE_PRODUCT_NAME IS MISSING THEN REV_FINANCE_PRODUCT_GSO ELSE OPP_FINANCE_PRODUCT_NAME END) AS FINANCE_PRODUCT_GSO,
		(CASE WHEN OPP_ADDON_MAC_SUBSC IS MISSING THEN REV_ADDON_MAC_SUBSC ELSE OPP_ADDON_MAC_SUBSC END) AS ADDON_MAC_SUBSC,
		(CASE WHEN OPP_RECAST_TYPE IS MISSING THEN REV_RECAST_TYPE ELSE OPP_RECAST_TYPE END) AS RECAST_TYPE,

		(CASE WHEN OPP_Product_TCV_USD IS MISSING THEN 0 ELSE OPP_Product_TCV_USD END) AS OPP_PRODUCT_TCV_USD,
		(CASE WHEN OPP_ProdFamACV IS MISSING THEN 0 ELSE OPP_ProdFamACV END) AS OPP_PROD_FAM_ACV,

		GSO_New_Company_Number,
		GSO_FINANCE_PRODUCT_NAME,
		GSO_ADDON_MAC_SUBSC,
		GSO_RECAST_TYPE,
		GSO_Special_Wholesale_Flag,
		GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,

          REV_SOURCEDATA,		  
		  JAN2019REV, FEB2019REV, MAR2019REV, APR2019REV, MAY2019REV, JUN2019REV, 
          JUL2019REV, AUG2019REV, SEP2019REV, OCT2019REV, NOV2019REV, DEC2019REV,
          JAN2020REV, FEB2020REV, MAR2020REV, APR2020REV, MAY2020REV, JUN2020REV, 
          JUL2020REV, AUG2020REV, SEP2020REV, OCT2020REV, NOV2020REV, DEC2020REV,
          JAN2021REV, FEB2021REV, MAR2021REV, APR2021REV, MAY2021REV, JUN2021REV, 
          JUL2021REV, AUG2021REV, SEP2021REV, OCT2021REV, NOV2021REV, DEC2021REV,
		  JAN2022REV, FEB2022REV, MAR2022REV, APR2022REV, MAY2022REV, JUN2022REV, 
          JUL2022REV, AUG2022REV, SEP2022REV, OCT2022REV, NOV2022REV, DEC2022REV,

		  'BILLED' AS OPP_MATCH_REASON,
		  'MATCHED' AS OPP_MATCH_STATUS

      FROM RevReal1.OPP_REV_COMBINED
      WHERE OPP_REVENUE_MATCH IN 
           (
           'OPP_MATCHED_TO_REVENUE'
           )

		   UNION

/*ITEM2 - UNMATCHED - NOTBILLED*/
		   SELECT distinct
		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS MISSING THEN REV_COMPANY_ID ELSE OPP_COMPANY_NUMBER_NEW END) AS COMPANY_NUMBER,
		(CASE WHEN OPP_COMPANY_NAME IS MISSING THEN REV_COMPANY_NAME ELSE OPP_COMPANY_NAME END) AS COMPANY_NAME,
		(CASE WHEN OPP_ENTITY_CODE IS MISSING THEN REV_ENTITY_CODE ELSE OPP_ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN OPP_ENTITY_NAME IS MISSING THEN REV_ENTITY_NAME ELSE OPP_ENTITY_NAME END) AS ENTITY_NAME,

		(CASE WHEN OPP_OPPORTUNITYID IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITYID END) AS OPPORTUNITYID,
		(CASE WHEN OPP_DURATION IS MISSING THEN 0 ELSE OPP_DURATION END) AS OPP_DURATION,
		datepart(OPP_CONTRACT_START_DATE) as OPP_CONTRACT_START_DATE format mmddyy10.,
		datepart(OPP_OPPORTUNITY_CLOSE_DATE) as OPPORTUNITY_CLOSE_DATE format mmddyy10.,
		YEAR(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_YEAR,
		MONTH(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_MONTH,
		datepart(OPP_OPPORTUNITY_CREATE_DATE) as OPPORTUNITY_CREATE_DATE format mmddyy10.,		

		(CASE WHEN OPP_OPP_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION END) AS OPP_SALES_MOTION,
		(CASE WHEN OPP_OPP_SALES_MOTION_CONVERTED IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION_CONVERTED END) AS OPP_SALES_MOTION_CONVERTED,
		(CASE WHEN OPP_LINE_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_LINE_SALES_MOTION END) AS OPP_LINE_SALES_MOTION,
		(CASE WHEN OPP_LINE_MOTION_DETAIL IS MISSING THEN 'N/A' ELSE OPP_LINE_MOTION_DETAIL END) AS OPP_LINE_MOTION_DETAIL,
		(CASE WHEN OPP_OPPORTUNITY_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_NAME END) AS OPPORTUNITY_NAME,
		(CASE WHEN OPP_OPPORTUNITY_PRODUCT_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_PRODUCT_NAME END) AS OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,

		(CASE WHEN OPP_FINANCE_PRODUCT_NAME IS MISSING THEN REV_FINANCE_PRODUCT_GSO ELSE OPP_FINANCE_PRODUCT_NAME END) AS FINANCE_PRODUCT_GSO,
		(CASE WHEN OPP_ADDON_MAC_SUBSC IS MISSING THEN REV_ADDON_MAC_SUBSC ELSE OPP_ADDON_MAC_SUBSC END) AS ADDON_MAC_SUBSC,
		(CASE WHEN OPP_RECAST_TYPE IS MISSING THEN REV_RECAST_TYPE ELSE OPP_RECAST_TYPE END) AS RECAST_TYPE,



		(CASE WHEN OPP_Product_TCV_USD IS MISSING THEN 0 ELSE OPP_Product_TCV_USD END) AS OPP_PRODUCT_TCV_USD,
		(CASE WHEN OPP_ProdFamACV IS MISSING THEN 0 ELSE OPP_ProdFamACV END) AS OPP_PROD_FAM_ACV,

		GSO_New_Company_Number,
		GSO_FINANCE_PRODUCT_NAME,
		GSO_ADDON_MAC_SUBSC,
		GSO_RECAST_TYPE,
		GSO_Special_Wholesale_Flag,
		GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,

          REV_SOURCEDATA,		  
		  JAN2019REV, FEB2019REV, MAR2019REV, APR2019REV, MAY2019REV, JUN2019REV, 
          JUL2019REV, AUG2019REV, SEP2019REV, OCT2019REV, NOV2019REV, DEC2019REV,
          JAN2020REV, FEB2020REV, MAR2020REV, APR2020REV, MAY2020REV, JUN2020REV, 
          JUL2020REV, AUG2020REV, SEP2020REV, OCT2020REV, NOV2020REV, DEC2020REV,
          JAN2021REV, FEB2021REV, MAR2021REV, APR2021REV, MAY2021REV, JUN2021REV, 
          JUL2021REV, AUG2021REV, SEP2021REV, OCT2021REV, NOV2021REV, DEC2021REV,
		  JAN2022REV, FEB2022REV, MAR2022REV, APR2022REV, MAY2022REV, JUN2022REV, 
          JUL2022REV, AUG2022REV, SEP2022REV, OCT2022REV, NOV2022REV, DEC2022REV,

		  'NOT-BILLED' AS OPP_MATCH_REASON,
		  'UNMATCHED' AS OPP_MATCH_STATUS

/*EDIT: Change table OPP_REV_COMB_ITER# based on recent iteration*/
      FROM &iter_table
      WHERE OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE'
	  AND COMPANY_NUMBER_STATUS = 'REV_COMP_NUM_MISSING'
	  AND OPP_COMPANY_NUMBER_NEW IN (SELECT DISTINCT OPP_COMPANY_NUMBER_NEW FROM RevReal1.OPP_UNMATCHED_NO_COMP_REVENUE)

		   UNION
/*ITEM3 - UNMATCHED - ANOMALY*/
		   SELECT distinct
		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS MISSING THEN REV_COMPANY_ID ELSE OPP_COMPANY_NUMBER_NEW END) AS COMPANY_NUMBER,
		(CASE WHEN OPP_COMPANY_NAME IS MISSING THEN REV_COMPANY_NAME ELSE OPP_COMPANY_NAME END) AS COMPANY_NAME,
		(CASE WHEN OPP_ENTITY_CODE IS MISSING THEN REV_ENTITY_CODE ELSE OPP_ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN OPP_ENTITY_NAME IS MISSING THEN REV_ENTITY_NAME ELSE OPP_ENTITY_NAME END) AS ENTITY_NAME,

		(CASE WHEN OPP_OPPORTUNITYID IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITYID END) AS OPPORTUNITYID,
		(CASE WHEN OPP_DURATION IS MISSING THEN 0 ELSE OPP_DURATION END) AS OPP_DURATION,
		datepart(OPP_CONTRACT_START_DATE) as OPP_CONTRACT_START_DATE format mmddyy10.,
		datepart(OPP_OPPORTUNITY_CLOSE_DATE) as OPPORTUNITY_CLOSE_DATE format mmddyy10.,
		YEAR(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_YEAR,
		MONTH(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_MONTH,
		datepart(OPP_OPPORTUNITY_CREATE_DATE) as OPPORTUNITY_CREATE_DATE format mmddyy10.,		

		(CASE WHEN OPP_OPP_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION END) AS OPP_SALES_MOTION,
		(CASE WHEN OPP_OPP_SALES_MOTION_CONVERTED IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION_CONVERTED END) AS OPP_SALES_MOTION_CONVERTED,
		(CASE WHEN OPP_LINE_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_LINE_SALES_MOTION END) AS OPP_LINE_SALES_MOTION,
		(CASE WHEN OPP_LINE_MOTION_DETAIL IS MISSING THEN 'N/A' ELSE OPP_LINE_MOTION_DETAIL END) AS OPP_LINE_MOTION_DETAIL,
		(CASE WHEN OPP_OPPORTUNITY_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_NAME END) AS OPPORTUNITY_NAME,
		(CASE WHEN OPP_OPPORTUNITY_PRODUCT_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_PRODUCT_NAME END) AS OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,

		(CASE WHEN OPP_FINANCE_PRODUCT_NAME IS MISSING THEN REV_FINANCE_PRODUCT_GSO ELSE OPP_FINANCE_PRODUCT_NAME END) AS FINANCE_PRODUCT_GSO,
		(CASE WHEN OPP_ADDON_MAC_SUBSC IS MISSING THEN REV_ADDON_MAC_SUBSC ELSE OPP_ADDON_MAC_SUBSC END) AS ADDON_MAC_SUBSC,
		(CASE WHEN OPP_RECAST_TYPE IS MISSING THEN REV_RECAST_TYPE ELSE OPP_RECAST_TYPE END) AS RECAST_TYPE,



		(CASE WHEN OPP_Product_TCV_USD IS MISSING THEN 0 ELSE OPP_Product_TCV_USD END) AS OPP_PRODUCT_TCV_USD,
		(CASE WHEN OPP_ProdFamACV IS MISSING THEN 0 ELSE OPP_ProdFamACV END) AS OPP_PROD_FAM_ACV,

		GSO_New_Company_Number,
		GSO_FINANCE_PRODUCT_NAME,
		GSO_ADDON_MAC_SUBSC,
		GSO_RECAST_TYPE,
		GSO_Special_Wholesale_Flag,
		GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,

          REV_SOURCEDATA,
		  JAN2019REV, FEB2019REV, MAR2019REV, APR2019REV, MAY2019REV, JUN2019REV, 
          JUL2019REV, AUG2019REV, SEP2019REV, OCT2019REV, NOV2019REV, DEC2019REV,
          JAN2020REV, FEB2020REV, MAR2020REV, APR2020REV, MAY2020REV, JUN2020REV, 
          JUL2020REV, AUG2020REV, SEP2020REV, OCT2020REV, NOV2020REV, DEC2020REV,
          JAN2021REV, FEB2021REV, MAR2021REV, APR2021REV, MAY2021REV, JUN2021REV, 
          JUL2021REV, AUG2021REV, SEP2021REV, OCT2021REV, NOV2021REV, DEC2021REV,
		  JAN2022REV, FEB2022REV, MAR2022REV, APR2022REV, MAY2022REV, JUN2022REV, 
          JUL2022REV, AUG2022REV, SEP2022REV, OCT2022REV, NOV2022REV, DEC2022REV,

		  'ANOMALY' AS OPP_MATCH_REASON,
		  'UNMATCHED' AS OPP_MATCH_STATUS

/*EDIT: Change table OPP_REV_COMB_ITER# based on recent iteration*/
      FROM &iter_table
      WHERE OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE'
	  AND COMPANY_NUMBER_STATUS = 'REV_COMP_NUM_MISSING'
	  AND OPP_COMPANY_NUMBER_NEW NOT IN (SELECT DISTINCT OPP_COMPANY_NUMBER_NEW FROM RevReal1.OPP_UNMATCHED_NO_COMP_REVENUE)

		   UNION

/*ITEM4 - UNMATCHED - OPPS_COMPNUMBER_MISSING*/
		   SELECT distinct
		(CASE WHEN OPP_COMPANY_NUMBER_NEW IS MISSING THEN REV_COMPANY_ID ELSE OPP_COMPANY_NUMBER_NEW END) AS COMPANY_NUMBER,
		(CASE WHEN OPP_COMPANY_NAME IS MISSING THEN REV_COMPANY_NAME ELSE OPP_COMPANY_NAME END) AS COMPANY_NAME,
		(CASE WHEN OPP_ENTITY_CODE IS MISSING THEN REV_ENTITY_CODE ELSE OPP_ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN OPP_ENTITY_NAME IS MISSING THEN REV_ENTITY_NAME ELSE OPP_ENTITY_NAME END) AS ENTITY_NAME,

		(CASE WHEN OPP_OPPORTUNITYID IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITYID END) AS OPPORTUNITYID,
		(CASE WHEN OPP_DURATION IS MISSING THEN 0 ELSE OPP_DURATION END) AS OPP_DURATION,
		datepart(OPP_CONTRACT_START_DATE) as OPP_CONTRACT_START_DATE format mmddyy10.,
		datepart(OPP_OPPORTUNITY_CLOSE_DATE) as OPPORTUNITY_CLOSE_DATE format mmddyy10.,
		YEAR(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_YEAR,
		MONTH(DATEPART(OPP_OPPORTUNITY_CLOSE_DATE)) AS OPPORTUNITY_CLOSE_MONTH,
		datepart(OPP_OPPORTUNITY_CREATE_DATE) as OPPORTUNITY_CREATE_DATE format mmddyy10.,		

		(CASE WHEN OPP_OPP_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION END) AS OPP_SALES_MOTION,
		(CASE WHEN OPP_OPP_SALES_MOTION_CONVERTED IS MISSING THEN 'N/A' ELSE OPP_OPP_SALES_MOTION_CONVERTED END) AS OPP_SALES_MOTION_CONVERTED,
		(CASE WHEN OPP_LINE_SALES_MOTION IS MISSING THEN 'N/A' ELSE OPP_LINE_SALES_MOTION END) AS OPP_LINE_SALES_MOTION,
		(CASE WHEN OPP_LINE_MOTION_DETAIL IS MISSING THEN 'N/A' ELSE OPP_LINE_MOTION_DETAIL END) AS OPP_LINE_MOTION_DETAIL,
		(CASE WHEN OPP_OPPORTUNITY_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_NAME END) AS OPPORTUNITY_NAME,
		(CASE WHEN OPP_OPPORTUNITY_PRODUCT_NAME IS MISSING THEN 'N/A' ELSE OPP_OPPORTUNITY_PRODUCT_NAME END) AS OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,

		(CASE WHEN OPP_FINANCE_PRODUCT_NAME IS MISSING THEN REV_FINANCE_PRODUCT_GSO ELSE OPP_FINANCE_PRODUCT_NAME END) AS FINANCE_PRODUCT_GSO,
		(CASE WHEN OPP_ADDON_MAC_SUBSC IS MISSING THEN REV_ADDON_MAC_SUBSC ELSE OPP_ADDON_MAC_SUBSC END) AS ADDON_MAC_SUBSC,
		(CASE WHEN OPP_RECAST_TYPE IS MISSING THEN REV_RECAST_TYPE ELSE OPP_RECAST_TYPE END) AS RECAST_TYPE,



		(CASE WHEN OPP_Product_TCV_USD IS MISSING THEN 0 ELSE OPP_Product_TCV_USD END) AS OPP_PRODUCT_TCV_USD,
		(CASE WHEN OPP_ProdFamACV IS MISSING THEN 0 ELSE OPP_ProdFamACV END) AS OPP_PROD_FAM_ACV,

		GSO_New_Company_Number,
		GSO_FINANCE_PRODUCT_NAME,
		GSO_ADDON_MAC_SUBSC,
		GSO_RECAST_TYPE,
		GSO_Special_Wholesale_Flag,
		GSO_Notes,
		OPP_COMPANY_NUMBER_OLD, 
		OPP_FINANCE_PRODUCT_NAME_OLD, 
		OPP_ADDON_MAC_SUBSC_OLD, 
		OPP_RECAST_TYPE_OLD,

          REV_SOURCEDATA,
		  JAN2019REV, FEB2019REV, MAR2019REV, APR2019REV, MAY2019REV, JUN2019REV, 
          JUL2019REV, AUG2019REV, SEP2019REV, OCT2019REV, NOV2019REV, DEC2019REV,
          JAN2020REV, FEB2020REV, MAR2020REV, APR2020REV, MAY2020REV, JUN2020REV, 
          JUL2020REV, AUG2020REV, SEP2020REV, OCT2020REV, NOV2020REV, DEC2020REV,
          JAN2021REV, FEB2021REV, MAR2021REV, APR2021REV, MAY2021REV, JUN2021REV, 
          JUL2021REV, AUG2021REV, SEP2021REV, OCT2021REV, NOV2021REV, DEC2021REV,
		  JAN2022REV, FEB2022REV, MAR2022REV, APR2022REV, MAY2022REV, JUN2022REV, 
          JUL2022REV, AUG2022REV, SEP2022REV, OCT2022REV, NOV2022REV, DEC2022REV,

		  'OPP_COMPNUM_MISSING' AS OPP_MATCH_REASON,
		  'UNMATCHED' AS OPP_MATCH_STATUS

/*EDIT: Change table OPP_REV_COMB_ITER# based on recent iteration*/
      FROM &iter_table
      WHERE OPP_REVENUE_MATCH = 'OPP_UNMATCHED_TO_REVENUE'
	  AND COMPANY_NUMBER_STATUS = 'OPP_REV_COMP_NUM_MISSING'
;
QUIT;

/*RYAN CODE BEGINS*/

/*10.11 - OPP_REV_COMBINED_FOR_DASH (ADJUSTING OPPORTUNITY_CLOSE_YEAR AND OPPORTUNITY_CLOSE_MONTH)*/
PROC SQL;
   CREATE TABLE RevReal1.OPP_REV_COMBINED_FOR_SM AS SELECT DISTINCT *,
		CASE WHEN STRIP(PUT(YEAR(OPPORTUNITY_CLOSE_DATE),4.)) = '.' THEN '' 
			ELSE STRIP(PUT(YEAR(OPPORTUNITY_CLOSE_DATE),4.)) END  AS OPP_CLOSE_YEAR,
		CASE WHEN STRIP(PUT(MONTH(OPPORTUNITY_CLOSE_DATE),2.)) = '.' THEN ''
			WHEN LENGTH(STRIP(PUT(MONTH(OPPORTUNITY_CLOSE_DATE),2.))) < 2 THEN '0' || STRIP(PUT(MONTH(OPPORTUNITY_CLOSE_DATE),2.))
		WHEN LENGTH(STRIP(PUT(MONTH(OPPORTUNITY_CLOSE_DATE),2.))) = 2 THEN STRIP(PUT(MONTH(OPPORTUNITY_CLOSE_DATE),2.))
		ELSE '' END AS OPP_CLOSE_MONTH,
		CATX("_", FINANCE_PRODUCT_GSO, ADDON_MAC_SUBSC, RECAST_TYPE) AS FINANCE_PRODUCT_COMBO
      FROM RevReal1.OPP_REV_COMBINED_FOR_DASH;
QUIT;




/*12.1 - Summarize dataset with latest 12 month revenue*/
proc sql;
	create table RevReal1.allprod_last12mon_final as select
		COMPANY_NUMBER,
		COMPANY_NAME,
		ENTITY_CODE,
		ENTITY_NAME,
		OPPORTUNITYID,
		OPP_DURATION,
		OPP_CONTRACT_START_DATE,
		OPPORTUNITY_CLOSE_DATE,
		OPPORTUNITY_CLOSE_YEAR,
		OPPORTUNITY_CLOSE_MONTH,
		OPPORTUNITY_CREATE_DATE,
		OPP_SALES_MOTION,
		OPP_SALES_MOTION_CONVERTED,
		OPP_LINE_SALES_MOTION,
		OPP_LINE_MOTION_DETAIL,
		OPPORTUNITY_NAME,
		OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		OPP_PRODUCT_TCV_USD,
		OPP_PROD_FAM_ACV,
		REV_SOURCEDATA,
		OPP_MATCH_REASON,
		OPP_MATCH_STATUS,
		(case when Jan2019Rev = . then 0 else Jan2019Rev end) as Jan2019Rev,
		(case when Feb2019Rev = . then 0 else Feb2019Rev end) as Feb2019Rev,
		(case when Mar2019Rev = . then 0 else Mar2019Rev end) as Mar2019Rev,
		(case when Apr2019Rev = . then 0 else Apr2019Rev end) as Apr2019Rev,
		(case when May2019Rev = . then 0 else May2019Rev end) as May2019Rev,
		(case when Jun2019Rev = . then 0 else Jun2019Rev end) as Jun2019Rev,
		(case when Jul2019Rev = . then 0 else Jul2019Rev end) as Jul2019Rev,
		(case when Aug2019Rev = . then 0 else Aug2019Rev end) as Aug2019Rev,
		(case when Sep2019Rev = . then 0 else Sep2019Rev end) as Sep2019Rev,
		(case when Oct2019Rev = . then 0 else Oct2019Rev end) as Oct2019Rev,
		(case when Nov2019Rev = . then 0 else Nov2019Rev end) as Nov2019Rev,
		(case when Dec2019Rev = . then 0 else Dec2019Rev end) as Dec2019Rev,
		(case when Jan2020Rev = . then 0 else Jan2020Rev end) as Jan2020Rev,
		(case when Feb2020Rev = . then 0 else Feb2020Rev end) as Feb2020Rev,
		(case when Mar2020Rev = . then 0 else Mar2020Rev end) as Mar2020Rev,
		(case when Apr2020Rev = . then 0 else Apr2020Rev end) as Apr2020Rev,
		(case when May2020Rev = . then 0 else May2020Rev end) as May2020Rev,
		(case when Jun2020Rev = . then 0 else Jun2020Rev end) as Jun2020Rev,
		(case when Jul2020Rev = . then 0 else Jul2020Rev end) as Jul2020Rev,
		(case when Aug2020Rev = . then 0 else Aug2020Rev end) as Aug2020Rev,
		(case when Sep2020Rev = . then 0 else Sep2020Rev end) as Sep2020Rev,
		(case when Oct2020Rev = . then 0 else Oct2020Rev end) as Oct2020Rev,
		(case when Nov2020Rev = . then 0 else Nov2020Rev end) as Nov2020Rev,
		(case when Dec2020Rev = . then 0 else Dec2020Rev end) as Dec2020Rev,
		(case when Jan2021Rev = . then 0 else Jan2021Rev end) as Jan2021Rev,
		(case when Feb2021Rev = . then 0 else Feb2021Rev end) as Feb2021Rev,
		(case when Mar2021Rev = . then 0 else Mar2021Rev end) as Mar2021Rev,
		(case when Apr2021Rev = . then 0 else Apr2021Rev end) as Apr2021Rev,
		(case when May2021Rev = . then 0 else May2021Rev end) as May2021Rev,
		(case when Jun2021Rev = . then 0 else Jun2021Rev end) as Jun2021Rev,
		(case when Jul2021Rev = . then 0 else Jul2021Rev end) as Jul2021Rev,
		(case when Aug2021Rev = . then 0 else Aug2021Rev end) as Aug2021Rev,
		(case when Sep2021Rev = . then 0 else Sep2021Rev end) as Sep2021Rev,
		(case when Oct2021Rev = . then 0 else Oct2021Rev end) as Oct2021Rev,
		(case when Nov2021Rev = . then 0 else Nov2021Rev end) as Nov2021Rev,
		(case when Dec2021Rev = . then 0 else Dec2021Rev end) as Dec2021Rev,
		(case when Jan2022Rev = . then 0 else Jan2022Rev end) as Jan2022Rev,
		(case when Feb2022Rev = . then 0 else Feb2022Rev end) as Feb2022Rev,
		(case when Mar2022Rev = . then 0 else Mar2022Rev end) as Mar2022Rev,
		(case when Apr2022Rev = . then 0 else Apr2022Rev end) as Apr2022Rev,
		(case when May2022Rev = . then 0 else May2022Rev end) as May2022Rev,
		(case when Jun2022Rev = . then 0 else Jun2022Rev end) as Jun2022Rev,
		(case when Jul2022Rev = . then 0 else Jul2022Rev end) as Jul2022Rev,
		(case when Aug2022Rev = . then 0 else Aug2022Rev end) as Aug2022Rev,
		(case when Sep2022Rev = . then 0 else Sep2022Rev end) as Sep2022Rev,
		(case when Oct2022Rev = . then 0 else Oct2022Rev end) as Oct2022Rev,
		(case when Nov2022Rev = . then 0 else Nov2022Rev end) as Nov2022Rev,
		(case when Dec2022Rev = . then 0 else Dec2022Rev end) as Dec2022Rev,
		OPP_CLOSE_YEAR,
		OPP_CLOSE_MONTH,
		FINANCE_PRODUCT_COMBO
	from RevReal1.OPP_REV_COMBINED_FOR_SM;
quit;

******===============================================================================================================****;

/*16.1 - SALES_MOTION_SUMMARY*/
PROC SQL;
	CREATE TABLE RevReal1.SALES_MOTION_SUMMARY_TEMP_0 AS
	SELECT DISTINCT
	A.*,
	INPUT(A.OPP_CLOSE_YEAR,4.) AS OPP_CLOSE_YEAR, 
	INPUT(A.OPP_CLOSE_MONTH,2.) AS OPP_CLOSE_MONTH,
	A.OPPORTUNITY_CLOSE_DATE AS OPPORTUNITY_CLOSE_DATE_F format mmddyy10.
	FROM RevReal1.allprod_last12mon_final a
	ORDER BY A.COMPANY_NUMBER, A.COMPANY_NAME, A.OPPORTUNITY_PRODUCT_NAME, A.FINANCE_PRODUCT_COMBO, A.OPPORTUNITY_CLOSE_DATE;
QUIT;

/*18.1 - Product Family Level ACV Calculation - START*/
/* Entity Product Family $ ACV */
proc sql;
create table RevReal1.COMPANY_FIN_PROD_COMBO_ACV as select distinct 
COMPANY_NUMBER, FINANCE_PRODUCT_COMBO, OPP_CLOSE_YEAR, SUM(OPP_PRODUCT_TCV_USD/(OPP_DURATION/12)) as ProdFamACV
FROM RevReal1.SALES_MOTION_SUMMARY_TEMP_0
GROUP BY COMPANY_NUMBER, FINANCE_PRODUCT_COMBO, OPP_CLOSE_YEAR;
quit;


/*20.1 - SALES_MOTION_SUMMARY_TEMP_1*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_TEMP_1 as select distinct 
		a.*, d.ProdFamACV, 
		(CASE WHEN e.WIPC_Partner IS MISSING THEN 'Direct' ELSE e.WIPC_Partner END) as WIPC_Partner,
		(CASE WHEN e.Segment IS MISSING THEN 'Direct' ELSE e.Segment END) as Segment
	FROM RevReal1.SALES_MOTION_SUMMARY_TEMP_0 a
	left join RevReal1.COMPANY_FIN_PROD_COMBO_ACV d 
		on a.COMPANY_NUMBER = d.COMPANY_NUMBER 
		and a.FINANCE_PRODUCT_COMBO=d.FINANCE_PRODUCT_COMBO 
		and a.OPP_CLOSE_YEAR=d.OPP_CLOSE_YEAR
	left join Partner1.partnermapping e on a.ENTITY_CODE = e.ENTITY_CODE
;
quit;

proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_0 as select
		a.COMPANY_NUMBER,
		a.COMPANY_NAME,
		a.ENTITY_CODE,
		a.ENTITY_NAME,
		a.OPPORTUNITYID,
		a.OPP_DURATION,
		a.OPP_CONTRACT_START_DATE,
		a.OPPORTUNITY_CLOSE_DATE,
		a.OPPORTUNITY_CLOSE_YEAR,
		a.OPPORTUNITY_CLOSE_MONTH,
		a.OPPORTUNITY_CREATE_DATE,
		a.OPP_SALES_MOTION,
		a.OPP_SALES_MOTION_CONVERTED,
		a.OPP_LINE_SALES_MOTION,
		a.OPP_LINE_MOTION_DETAIL,
		a.OPPORTUNITY_NAME,
		a.OPPORTUNITY_PRODUCT_NAME,
		a.OPP_TIMEFRAME,
		a.TOTAL_CONTRACT_VARIANCE,
		a.CUSTOMER_TYPE,
		a.OPP_WEST_BUSINESS_UNIT,
		a.OPP_TCV_CLASSIFICATION,
		a.FINANCE_PRODUCT_GSO,
		a.ADDON_MAC_SUBSC,
		a.RECAST_TYPE,
		a.FINANCE_PRODUCT_COMBO,
		(STRIP(a.COMPANY_NUMBER)||"_"||STRIP(a.FINANCE_PRODUCT_COMBO)) AS COMP_NUM_FIN_PROD,
		a.OPP_PRODUCT_TCV_USD,
		a.OPP_PROD_FAM_ACV,
		a.PRODFAMACV,
		a.WIPC_PARTNER,
		a.SEGMENT,
		a.REV_SOURCEDATA,
		a.OPP_MATCH_REASON,
		a.OPP_MATCH_STATUS,

		a.Jan2019Rev, a.Feb2019Rev, a.Mar2019Rev, a.Apr2019Rev, a.May2019Rev, a.Jun2019Rev,
		a.Jul2019Rev, a.Aug2019Rev, a.Sep2019Rev, a.Oct2019Rev, a.Nov2019Rev, a.Dec2019Rev,

		a.Jan2020Rev, a.Feb2020Rev, a.Mar2020Rev, a.Apr2020Rev, a.May2020Rev, a.Jun2020Rev,
		a.Jul2020Rev, a.Aug2020Rev, a.Sep2020Rev, a.Oct2020Rev, a.Nov2020Rev, a.Dec2020Rev,

		a.Jan2021Rev, a.Feb2021Rev, a.Mar2021Rev, a.Apr2021Rev, a.May2021Rev, a.Jun2021Rev,
		a.Jul2021Rev, a.Aug2021Rev, a.Sep2021Rev, a.Oct2021Rev, a.Nov2021Rev, a.Dec2021Rev,

		a.Jan2022Rev, a.Feb2022Rev, a.Mar2022Rev, a.Apr2022Rev, a.May2022Rev, a.Jun2022Rev,
		a.Jul2022Rev, a.Aug2022Rev, a.Sep2022Rev, a.Oct2022Rev, a.Nov2022Rev, a.Dec2022Rev

	from RevReal1.SALES_MOTION_SUMMARY_TEMP_1 a
	inner join RevReal1.OPP_REV_COMBINED_FOR_SM b 
	on a.company_number = b.company_number
	and a.company_name = b.company_name
	and a.OPPORTUNITYID = b.OPPORTUNITYID
	and a.OPPORTUNITY_PRODUCT_NAME = b.OPPORTUNITY_PRODUCT_NAME
	and a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO
	and a.OPPORTUNITY_CLOSE_DATE = b.OPPORTUNITY_CLOSE_DATE
;
quit;


/*21.1 - NOT UPSELL Table*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_NTUPS as 
	select DISTINCT COMPANY_NUMBER, FINANCE_PRODUCT_COMBO, COMP_NUM_FIN_PROD
	from RevReal1.SALES_MOTION_SUMMARY_0
	WHERE OPP_LINE_SALES_MOTION <> 'Upsell'
	AND COMPANY_NUMBER IS NOT MISSING
;
quit;

/*21.2 - UPSELL Table*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_UPS as 
	select DISTINCT COMPANY_NUMBER, FINANCE_PRODUCT_COMBO, COMP_NUM_FIN_PROD,  'Y' as UPSELL_ONLY_COMP
	from RevReal1.SALES_MOTION_SUMMARY_0
	WHERE OPP_LINE_SALES_MOTION = 'Upsell'
	AND COMPANY_NUMBER IS NOT MISSING
	AND COMP_NUM_FIN_PROD NOT IN (SELECT DISTINCT COMP_NUM_FIN_PROD FROM RevReal1.SALES_MOTION_SUMMARY_NTUPS)
	AND OPP_MATCH_STATUS = 'MATCHED'
;
quit;

/*21.3 - SALES_MOTION_SUMMARY with UPSELL Tables*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY as 
	select a.*, b.UPSELL_ONLY_COMP
	from RevReal1.SALES_MOTION_SUMMARY_0 a 
	left join RevReal1.SALES_MOTION_SUMMARY_UPS b on a.COMP_NUM_FIN_PROD = b.COMP_NUM_FIN_PROD;
quit;
/***/

/*22.1 - SALES_MOTION_SUMMARY Prep for Rev realization*/
proc sql;
create table RevReal1.SALES_MOTION_SUMMARY_1 as
select *,

(case when OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,1,'BEGINNING') else OPP_CONTRACT_START_DATE end) as OPP_CONTRACT_START_DATE_A format MONYY.,
(case 

when OPP_LINE_SALES_MOTION IN ("Renewal","Upsell","N/A") AND OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,1,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Renewal","Upsell","N/A") AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) <= 25 then intnx('month',OPP_CONTRACT_START_DATE,0,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Renewal","Upsell","N/A") AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) >  25 then intnx('month',OPP_CONTRACT_START_DATE,1,'BEGINNING')

when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,1,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) <= 25 then intnx('month',OPP_CONTRACT_START_DATE,0,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) >  25 then intnx('month',OPP_CONTRACT_START_DATE,1,'BEGINNING')

when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,4,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) <= 25 then intnx('month',OPP_CONTRACT_START_DATE,3,'BEGINNING')
when OPP_LINE_SALES_MOTION IN ("Cross-Sell","New Logo","Recast") AND FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) >  25 then intnx('month',OPP_CONTRACT_START_DATE,4,'BEGINNING') 


when FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,4,'BEGINNING')
when FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) <= 25 then intnx('month',OPP_CONTRACT_START_DATE,3,'BEGINNING')
when FINANCE_PRODUCT_GSO IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) >  25 then intnx('month',OPP_CONTRACT_START_DATE,4,'BEGINNING') 

when FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is missing then intnx('month',OPPORTUNITY_CLOSE_DATE,1,'BEGINNING')
when FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) <= 25 then intnx('month',OPP_CONTRACT_START_DATE,0,'BEGINNING')
when FINANCE_PRODUCT_GSO NOT IN ('Hosted Voice', 'Managed Network') AND OPP_CONTRACT_START_DATE is not missing and DAY(OPP_CONTRACT_START_DATE) >  25 then intnx('month',OPP_CONTRACT_START_DATE,1,'BEGINNING')

end) as NEW_CONTRACT_START_DATE format MONYY.,

intnx('month',calculated NEW_CONTRACT_START_DATE,OPP_DURATION-1,'BEGINNING') as NEW_CONTRACT_END_DATE format MONYY.,

intnx('month',today(),0,'BEGINNING') as CURRENT_DATE format MONYY.,

(case when intck('month', calculated CURRENT_DATE, calculated NEW_CONTRACT_END_DATE) < 0 then 'NOTLAPSED' else 'LAPSED' end) as LAPSE_STATUS

from RevReal1.SALES_MOTION_SUMMARY;
quit;


/*22.2 - EARLIEST PURE UPSELL DATE*/
proc sql;
	create table RevReal1.EARLIEST_UPSELL_DATE as 
	select distinct COMP_NUM_FIN_PROD, MIN(NEW_CONTRACT_START_DATE) AS EARLIEST_UPSELL_DATE format MONYY.
	from RevReal1.SALES_MOTION_SUMMARY_1
	WHERE UPSELL_ONLY_COMP = 'Y'
	GROUP BY COMP_NUM_FIN_PROD;
quit;


/*22.3 - SALES_MOTION_SUMMARY_0*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_2 as 
	select distinct a.*, b.EARLIEST_UPSELL_DATE format MONYY.,
	intnx('month',EARLIEST_UPSELL_DATE,-3,'BEGINNING') as UPSELL_WIN_START format MONYY.,
	intnx('month',EARLIEST_UPSELL_DATE,-1,'BEGINNING') as UPSELL_WIN_END format MONYY.
	from RevReal1.SALES_MOTION_SUMMARY_1 a left join RevReal1.EARLIEST_UPSELL_DATE b on a.COMP_NUM_FIN_PROD = b.COMP_NUM_FIN_PROD;
quit;

/*22.4 - BASE and MONTH START*/
proc sql;
	create table Revenue1.MONTH_START as select distinct 
		datepart(month_start) AS RevMonth format MONYY.
		from RevReal1.REV_MN_WIPC_MGMT_2019up
		where calculated RevMonth >= '01JAN2019'd;
quit;

proc sql;
	create table RevReal1.BASE as select 
	COMPANY_NUMBER,OPPORTUNITYID,OPPORTUNITY_CLOSE_DATE,OPPORTUNITY_CLOSE_YEAR,OPPORTUNITY_PRODUCT_NAME,OPP_LINE_SALES_MOTION,
	FINANCE_PRODUCT_GSO,FINANCE_PRODUCT_COMBO,OPP_CONTRACT_START_DATE_A,NEW_CONTRACT_START_DATE, NEW_CONTRACT_END_DATE, 
	UPSELL_WIN_START,UPSELL_WIN_END,CURRENT_DATE, LAPSE_STATUS
	from RevReal1.SALES_MOTION_SUMMARY_2
	;
quit;

proc sql;
	create table RevReal1.BASE_MONTH_START as select a.*, b.*
	from RevReal1.BASE a, Revenue1.MONTH_START b
	;
quit;

/*23.1 - CREATING UPSELL LOGIC*/
proc sql;
	create table RevReal1.BASE_MONTH_START_0_U as
		select *,
		(case when RevMonth >= UPSELL_WIN_START AND RevMonth <= UPSELL_WIN_END AND RevMonth < CURRENT_DATE then 1
		else 0 end) as UpsellRevIndicator
		from RevReal1.BASE_MONTH_START
	;
quit;

proc sort data=RevReal1.BASE_MONTH_START_0_U
out= RevReal1.BASE_MONTH_START_1_U;
by COMPANY_NUMBER OPPORTUNITYID OPPORTUNITY_CLOSE_DATE OPPORTUNITY_CLOSE_YEAR OPPORTUNITY_PRODUCT_NAME OPP_LINE_SALES_MOTION
FINANCE_PRODUCT_GSO FINANCE_PRODUCT_COMBO OPP_CONTRACT_START_DATE_A NEW_CONTRACT_START_DATE NEW_CONTRACT_END_DATE 
UPSELL_WIN_START UPSELL_WIN_END CURRENT_DATE LAPSE_STATUS RevMonth;
run;

proc transpose data = RevReal1.BASE_MONTH_START_1_U out = RevReal1.BASE_MONTH_START_2_U;
    by COMPANY_NUMBER OPPORTUNITYID OPPORTUNITY_CLOSE_DATE OPPORTUNITY_CLOSE_YEAR OPPORTUNITY_PRODUCT_NAME OPP_LINE_SALES_MOTION
	FINANCE_PRODUCT_GSO FINANCE_PRODUCT_COMBO OPP_CONTRACT_START_DATE_A NEW_CONTRACT_START_DATE NEW_CONTRACT_END_DATE 
	UPSELL_WIN_START UPSELL_WIN_END CURRENT_DATE LAPSE_STATUS;
    id RevMonth;
run;

DATA RevReal1.BASE_MONTH_START_2_U;
 	SET RevReal1.BASE_MONTH_START_2_U;
	IF MISSING(MAR21) THEN MAR21 = 0;
	IF MISSING(APR21) THEN APR21 = 0;
	IF MISSING(MAY21) THEN MAY21 = 0;
	IF MISSING(JUN21) THEN JUN21 = 0;
	IF MISSING(JUL21) THEN JUL21 = 0;
	IF MISSING(AUG21) THEN AUG21 = 0;
	IF MISSING(SEP21) THEN SEP21 = 0;
	IF MISSING(OCT21) THEN OCT21 = 0;
	IF MISSING(NOV21) THEN NOV21 = 0;
	IF MISSING(DEC21) THEN DEC21 = 0;
	IF MISSING(JAN22) THEN JAN22 = 0;
	IF MISSING(FEB22) THEN FEB22 = 0;
	IF MISSING(MAR22) THEN MAR22 = 0;
	IF MISSING(APR22) THEN APR22 = 0;
	IF MISSING(MAY22) THEN MAY22 = 0;
	IF MISSING(JUN22) THEN JUN22 = 0;
	IF MISSING(JUL22) THEN JUL22 = 0;
	IF MISSING(AUG22) THEN AUG22 = 0;
	IF MISSING(SEP22) THEN SEP22 = 0;
	IF MISSING(OCT22) THEN OCT22 = 0;
	IF MISSING(NOV22) THEN NOV22 = 0;
	IF MISSING(DEC22) THEN DEC22 = 0;
RUN;


/*23.2 - CREATING NON-UPSELL LOGIC*/
proc sql;
	create table RevReal1.BASE_MONTH_START_0 as
		select *,
		(case  when OPP_LINE_SALES_MOTION IN ("New Logo") AND RevMonth < CURRENT_DATE then 1
		when OPP_LINE_SALES_MOTION NOT IN ("New Logo") and RevMonth >= NEW_CONTRACT_START_DATE AND RevMonth <= NEW_CONTRACT_END_DATE AND RevMonth < CURRENT_DATE then 1
		when RevMonth >= NEW_CONTRACT_START_DATE AND RevMonth <= NEW_CONTRACT_END_DATE AND RevMonth < CURRENT_DATE then 1
		else 0 end) as RevIndicator
		from RevReal1.BASE_MONTH_START
	;
quit;

proc sort data=RevReal1.BASE_MONTH_START_0
out= RevReal1.BASE_MONTH_START_1;
by COMPANY_NUMBER OPPORTUNITYID OPPORTUNITY_CLOSE_DATE OPPORTUNITY_CLOSE_YEAR OPPORTUNITY_PRODUCT_NAME OPP_LINE_SALES_MOTION
FINANCE_PRODUCT_GSO FINANCE_PRODUCT_COMBO OPP_CONTRACT_START_DATE_A NEW_CONTRACT_START_DATE NEW_CONTRACT_END_DATE 
UPSELL_WIN_START UPSELL_WIN_END CURRENT_DATE LAPSE_STATUS RevMonth;
run;

proc transpose data = RevReal1.BASE_MONTH_START_1 out = RevReal1.BASE_MONTH_START_2;
    by COMPANY_NUMBER OPPORTUNITYID OPPORTUNITY_CLOSE_DATE OPPORTUNITY_CLOSE_YEAR OPPORTUNITY_PRODUCT_NAME OPP_LINE_SALES_MOTION
	FINANCE_PRODUCT_GSO FINANCE_PRODUCT_COMBO OPP_CONTRACT_START_DATE_A NEW_CONTRACT_START_DATE NEW_CONTRACT_END_DATE 
	UPSELL_WIN_START UPSELL_WIN_END CURRENT_DATE LAPSE_STATUS;
    id RevMonth;
run;

DATA RevReal1.BASE_MONTH_START_2;
 	SET RevReal1.BASE_MONTH_START_2;
	IF MISSING(MAR21) THEN MAR21 = 0;
	IF MISSING(APR21) THEN APR21 = 0;
	IF MISSING(MAY21) THEN MAY21 = 0;
	IF MISSING(JUN21) THEN JUN21 = 0;
	IF MISSING(JUL21) THEN JUL21 = 0;
	IF MISSING(AUG21) THEN AUG21 = 0;
	IF MISSING(SEP21) THEN SEP21 = 0;
	IF MISSING(OCT21) THEN OCT21 = 0;
	IF MISSING(NOV21) THEN NOV21 = 0;
	IF MISSING(DEC21) THEN DEC21 = 0;
	IF MISSING(JAN22) THEN JAN22 = 0;
	IF MISSING(FEB22) THEN FEB22 = 0;
	IF MISSING(MAR22) THEN MAR22 = 0;
	IF MISSING(APR22) THEN APR22 = 0;
	IF MISSING(MAY22) THEN MAY22 = 0;
	IF MISSING(JUN22) THEN JUN22 = 0;
	IF MISSING(JUL22) THEN JUL22 = 0;
	IF MISSING(AUG22) THEN AUG22 = 0;
	IF MISSING(SEP22) THEN SEP22 = 0;
	IF MISSING(OCT22) THEN OCT22 = 0;
	IF MISSING(NOV22) THEN NOV22 = 0;
	IF MISSING(DEC22) THEN DEC22 = 0;
RUN;

/*24.1 - Revenue Proportion*/
proc sql;
	create table RevReal1.REVPROP as
		select distinct COMPANY_NUMBER, FINANCE_PRODUCT_COMBO, SUM(OPP_PRODUCT_TCV_USD) as TOTAL_TCV
		from RevReal1.SALES_MOTION_SUMMARY_2
		group by COMPANY_NUMBER, FINANCE_PRODUCT_COMBO
	;
quit;


/*25.1 - SALES_MOTION_SUMMARY_RR Tables*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_RR0 as
		select
		a.*,
		b.JAN19 AS JAN19_ACT, b.FEB19 AS FEB19_ACT, b.MAR19 AS MAR19_ACT,
		b.APR19 AS APR19_ACT, b.MAY19 AS MAY19_ACT, b.JUN19 AS JUN19_ACT,
		b.JUL19 AS JUL19_ACT, b.AUG19 AS AUG19_ACT, b.SEP19 AS SEP19_ACT,
		b.OCT19 AS OCT19_ACT, b.NOV19 AS NOV19_ACT, b.DEC19 AS DEC19_ACT,

		b.JAN20 AS JAN20_ACT, b.FEB20 AS FEB20_ACT, b.MAR20 AS MAR20_ACT,
		b.APR20 AS APR20_ACT, b.MAY20 AS MAY20_ACT, b.JUN20 AS JUN20_ACT,
		b.JUL20 AS JUL20_ACT, b.AUG20 AS AUG20_ACT, b.SEP20 AS SEP20_ACT,
		b.OCT20 AS OCT20_ACT, b.NOV20 AS NOV20_ACT, b.DEC20 AS DEC20_ACT,

		b.JAN21 AS JAN21_ACT, b.FEB21 AS FEB21_ACT, b.MAR21 AS MAR21_ACT,
		b.APR21 AS APR21_ACT, b.MAY21 AS MAY21_ACT, b.JUN21 AS JUN21_ACT,
		b.JUL21 AS JUL21_ACT, b.AUG21 AS AUG21_ACT, b.SEP21 AS SEP21_ACT,
		b.OCT21 AS OCT21_ACT, b.NOV21 AS NOV21_ACT, b.DEC21 AS DEC21_ACT,

		b.JAN22 AS JAN22_ACT, b.FEB22 AS FEB22_ACT, b.MAR22 AS MAR22_ACT,
		b.APR22 AS APR22_ACT, b.MAY22 AS MAY22_ACT, b.JUN22 AS JUN22_ACT,
		b.JUL22 AS JUL22_ACT, b.AUG22 AS AUG22_ACT, b.SEP22 AS SEP22_ACT,
		b.OCT22 AS OCT22_ACT, b.NOV22 AS NOV22_ACT, b.DEC22 AS DEC22_ACT,

		(OPP_PRODUCT_TCV_USD * b.JAN19) AS JAN2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.FEB19) AS FEB2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAR19) AS MAR2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.APR19) AS APR2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAY19) AS MAY2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUN19) AS JUN2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUL19) AS JUL2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.AUG19) AS AUG2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.SEP19) AS SEP2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.OCT19) AS OCT2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.NOV19) AS NOV2019_TCV,
		(OPP_PRODUCT_TCV_USD * b.DEC19) AS DEC2019_TCV,

		(OPP_PRODUCT_TCV_USD * b.JAN20) AS JAN2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.FEB20) AS FEB2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAR20) AS MAR2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.APR20) AS APR2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAY20) AS MAY2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUN20) AS JUN2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUL20) AS JUL2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.AUG20) AS AUG2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.SEP20) AS SEP2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.OCT20) AS OCT2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.NOV20) AS NOV2020_TCV,
		(OPP_PRODUCT_TCV_USD * b.DEC20) AS DEC2020_TCV,

		(OPP_PRODUCT_TCV_USD * b.JAN21) AS JAN2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.FEB21) AS FEB2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAR21) AS MAR2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.APR21) AS APR2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAY21) AS MAY2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUN21) AS JUN2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUL21) AS JUL2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.AUG21) AS AUG2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.SEP21) AS SEP2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.OCT21) AS OCT2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.NOV21) AS NOV2021_TCV,
		(OPP_PRODUCT_TCV_USD * b.DEC21) AS DEC2021_TCV,

		(OPP_PRODUCT_TCV_USD * b.JAN22) AS JAN2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.FEB22) AS FEB2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAR22) AS MAR2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.APR22) AS APR2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.MAY22) AS MAY2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUN22) AS JUN2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.JUL22) AS JUL2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.AUG22) AS AUG2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.SEP22) AS SEP2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.OCT22) AS OCT2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.NOV22) AS NOV2022_TCV,
		(OPP_PRODUCT_TCV_USD * b.DEC22) AS DEC2022_TCV,

		c.JAN19 AS JAN19_UPS, c.FEB19 AS FEB19_UPS, c.MAR19 AS MAR19_UPS,
		c.APR19 AS APR19_UPS, c.MAY19 AS MAY19_UPS, c.JUN19 AS JUN19_UPS,
		c.JUL19 AS JUL19_UPS, c.AUG19 AS AUG19_UPS, c.SEP19 AS SEP19_UPS,
		c.OCT19 AS OCT19_UPS, c.NOV19 AS NOV19_UPS, c.DEC19 AS DEC19_UPS,

		c.JAN20 AS JAN20_UPS, c.FEB20 AS FEB20_UPS, c.MAR20 AS MAR20_UPS,
		c.APR20 AS APR20_UPS, c.MAY20 AS MAY20_UPS, c.JUN20 AS JUN20_UPS,
		c.JUL20 AS JUL20_UPS, c.AUG20 AS AUG20_UPS, c.SEP20 AS SEP20_UPS,
		c.OCT20 AS OCT20_UPS, c.NOV20 AS NOV20_UPS, c.DEC20 AS DEC20_UPS,

		c.JAN21 AS JAN21_UPS, c.FEB21 AS FEB21_UPS, c.MAR21 AS MAR21_UPS,
		c.APR21 AS APR21_UPS, c.MAY21 AS MAY21_UPS, c.JUN21 AS JUN21_UPS,
		c.JUL21 AS JUL21_UPS, c.AUG21 AS AUG21_UPS, c.SEP21 AS SEP21_UPS,
		c.OCT21 AS OCT21_UPS, c.NOV21 AS NOV21_UPS, c.DEC21 AS DEC21_UPS,

		c.JAN22 AS JAN22_UPS, c.FEB22 AS FEB22_UPS, c.MAR22 AS MAR22_UPS,
		c.APR22 AS APR22_UPS, c.MAY22 AS MAY22_UPS, c.JUN22 AS JUN22_UPS,
		c.JUL22 AS JUL22_UPS, c.AUG22 AS AUG22_UPS, c.SEP22 AS SEP22_UPS,
		c.OCT22 AS OCT22_UPS, c.NOV22 AS NOV22_UPS, c.DEC22 AS DEC22_UPS,


		(case when a.CURRENT_DATE > a.NEW_CONTRACT_END_DATE THEN OPP_PRODUCT_TCV_USD
			  when OPP_TIMEFRAME = 'One-Time' AND a.CURRENT_DATE > a.NEW_CONTRACT_START_DATE THEN OPP_PRODUCT_TCV_USD
			  when OPP_TIMEFRAME = 'Annual' AND a.CURRENT_DATE >= a.NEW_CONTRACT_START_DATE AND a.CURRENT_DATE <= a.NEW_CONTRACT_END_DATE THEN (OPP_PRODUCT_TCV_USD/(OPP_DURATION/12))*ceil(intck('month', a.NEW_CONTRACT_START_DATE, a.CURRENT_DATE)/12)
			  when OPP_TIMEFRAME = 'Monthly' AND a.CURRENT_DATE >= a.NEW_CONTRACT_START_DATE AND a.CURRENT_DATE <= a.NEW_CONTRACT_END_DATE THEN (OPP_PRODUCT_TCV_USD/OPP_DURATION)*intck('month', a.NEW_CONTRACT_START_DATE, a.CURRENT_DATE)
			  else 0 end) as Projected_Bill

		from RevReal1.SALES_MOTION_SUMMARY_2 a 

		join RevReal1.BASE_MONTH_START_2 b on 
		a.COMPANY_NUMBER = b.COMPANY_NUMBER and
		a.OPPORTUNITYID = b.OPPORTUNITYID and
		a.OPPORTUNITY_CLOSE_DATE = b.OPPORTUNITY_CLOSE_DATE and
		a.OPPORTUNITY_PRODUCT_NAME = b.OPPORTUNITY_PRODUCT_NAME and
		a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO

		join RevReal1.BASE_MONTH_START_2_U c on 
		a.COMPANY_NUMBER = c.COMPANY_NUMBER and
		a.OPPORTUNITYID = c.OPPORTUNITYID and
		a.OPPORTUNITY_CLOSE_DATE = c.OPPORTUNITY_CLOSE_DATE and
		a.OPPORTUNITY_PRODUCT_NAME = c.OPPORTUNITY_PRODUCT_NAME and
		a.FINANCE_PRODUCT_COMBO = c.FINANCE_PRODUCT_COMBO;
quit;



/*25.2 - ALL TCV Revenue Proportion*/
proc sql;
	create table RevReal1.TOTALTCV_REVPROP as
		select distinct COMPANY_NUMBER, FINANCE_PRODUCT_COMBO,
		
		SUM(JAN2019_TCV) as JAN2019_TCV_PROP,
		SUM(FEB2019_TCV) as FEB2019_TCV_PROP,
		SUM(MAR2019_TCV) as MAR2019_TCV_PROP,
		SUM(APR2019_TCV) as APR2019_TCV_PROP,
		SUM(MAY2019_TCV) as MAY2019_TCV_PROP,
		SUM(JUN2019_TCV) as JUN2019_TCV_PROP,
		SUM(JUL2019_TCV) as JUL2019_TCV_PROP,
		SUM(AUG2019_TCV) as AUG2019_TCV_PROP,
		SUM(SEP2019_TCV) as SEP2019_TCV_PROP,
		SUM(OCT2019_TCV) as OCT2019_TCV_PROP,
		SUM(NOV2019_TCV) as NOV2019_TCV_PROP,
		SUM(DEC2019_TCV) as DEC2019_TCV_PROP,

		SUM(JAN2020_TCV) as JAN2020_TCV_PROP,
		SUM(FEB2020_TCV) as FEB2020_TCV_PROP,
		SUM(MAR2020_TCV) as MAR2020_TCV_PROP,
		SUM(APR2020_TCV) as APR2020_TCV_PROP,
		SUM(MAY2020_TCV) as MAY2020_TCV_PROP,
		SUM(JUN2020_TCV) as JUN2020_TCV_PROP,
		SUM(JUL2020_TCV) as JUL2020_TCV_PROP,
		SUM(AUG2020_TCV) as AUG2020_TCV_PROP,
		SUM(SEP2020_TCV) as SEP2020_TCV_PROP,
		SUM(OCT2020_TCV) as OCT2020_TCV_PROP,
		SUM(NOV2020_TCV) as NOV2020_TCV_PROP,
		SUM(DEC2020_TCV) as DEC2020_TCV_PROP,

		SUM(JAN2021_TCV) as JAN2021_TCV_PROP,
		SUM(FEB2021_TCV) as FEB2021_TCV_PROP,
		SUM(MAR2021_TCV) as MAR2021_TCV_PROP,
		SUM(APR2021_TCV) as APR2021_TCV_PROP,
		SUM(MAY2021_TCV) as MAY2021_TCV_PROP,
		SUM(JUN2021_TCV) as JUN2021_TCV_PROP,
		SUM(JUL2021_TCV) as JUL2021_TCV_PROP,
		SUM(AUG2021_TCV) as AUG2021_TCV_PROP,
		SUM(SEP2021_TCV) as SEP2021_TCV_PROP,
		SUM(OCT2021_TCV) as OCT2021_TCV_PROP,
		SUM(NOV2021_TCV) as NOV2021_TCV_PROP,
		SUM(DEC2021_TCV) as DEC2021_TCV_PROP,

		SUM(JAN2022_TCV) as JAN2022_TCV_PROP,
		SUM(FEB2022_TCV) as FEB2022_TCV_PROP,
		SUM(MAR2022_TCV) as MAR2022_TCV_PROP,
		SUM(APR2022_TCV) as APR2022_TCV_PROP,
		SUM(MAY2022_TCV) as MAY2022_TCV_PROP,
		SUM(JUN2022_TCV) as JUN2022_TCV_PROP,
		SUM(JUL2022_TCV) as JUL2022_TCV_PROP,
		SUM(AUG2022_TCV) as AUG2022_TCV_PROP,
		SUM(SEP2022_TCV) as SEP2022_TCV_PROP,
		SUM(OCT2022_TCV) as OCT2022_TCV_PROP,
		SUM(NOV2022_TCV) as NOV2022_TCV_PROP,
		SUM(DEC2022_TCV) as DEC2022_TCV_PROP


		from RevReal1.SALES_MOTION_SUMMARY_RR0
		group by COMPANY_NUMBER, FINANCE_PRODUCT_COMBO
	;
quit;


/*25.3 - SALES_MOTION_SUMMARY_RR  - SIMPLIFIED*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_RR as
		select
		a.COMPANY_NUMBER,
		COMPANY_NAME,
		ENTITY_CODE,
		ENTITY_NAME,
		OPPORTUNITYID,
		OPP_DURATION,
		OPP_CONTRACT_START_DATE,
		OPPORTUNITY_CLOSE_DATE,
		OPPORTUNITY_CLOSE_YEAR,
		OPPORTUNITY_CLOSE_MONTH,
		OPPORTUNITY_CREATE_DATE,
		OPP_SALES_MOTION,
		OPP_SALES_MOTION_CONVERTED,
		OPP_LINE_SALES_MOTION,
		OPP_LINE_MOTION_DETAIL,
		OPPORTUNITY_NAME,
		OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		a.FINANCE_PRODUCT_COMBO,
		OPP_PRODUCT_TCV_USD,
		OPP_PROD_FAM_ACV,
		ProdFamACV,
		WIPC_Partner,
		Segment,
		REV_SOURCEDATA,
		OPP_MATCH_REASON,
		OPP_MATCH_STATUS,
		UPSELL_ONLY_COMP,
		OPP_CONTRACT_START_DATE_A,
		NEW_CONTRACT_START_DATE,
		NEW_CONTRACT_END_DATE,
		CURRENT_DATE,
		LAPSE_STATUS,

		(case when (((Jan2019Rev * JAN19_UPS) + (Feb2019Rev * FEB19_UPS) + (Mar2019Rev * MAR19_UPS) + (Apr2019Rev * APR19_UPS) + (May2019Rev * MAY19_UPS) + (Jun2019Rev * JUN19_UPS) +
		(Jul2019Rev * JUL19_UPS) + (Aug2019Rev * AUG19_UPS) + (Sep2019Rev * SEP19_UPS) + (Oct2019Rev * OCT19_UPS) + (Nov2019Rev * NOV19_UPS) + (Dec2019Rev * DEC19_UPS) +

		(Jan2020Rev * JAN20_UPS) + (Feb2020Rev * FEB20_UPS) + (Mar2020Rev * MAR20_UPS) + (Apr2020Rev * APR20_UPS) + (May2020Rev * MAY20_UPS) + (Jun2020Rev * JUN20_UPS) +
		(Jul2020Rev * JUL20_UPS) + (Aug2020Rev * AUG20_UPS) + (Sep2020Rev * SEP20_UPS) + (Oct2020Rev * OCT20_UPS) + (Nov2020Rev * NOV20_UPS) + (Dec2020Rev * DEC20_UPS) + 
		
		(Jan2021Rev * JAN21_UPS) + (Feb2021Rev * FEB21_UPS) + (Mar2021Rev * MAR21_UPS) + (Apr2021Rev * APR21_UPS) + (May2021Rev * MAY21_UPS) + (Jun2021Rev * JUN21_UPS) +
		(Jul2021Rev * JUL21_UPS) + (Aug2021Rev * AUG21_UPS) + (Sep2021Rev * SEP21_UPS) + (Oct2021Rev * OCT21_UPS) + (Nov2021Rev * NOV21_UPS) + (Dec2021Rev * DEC21_UPS) + 

		(Jan2022Rev * JAN22_UPS) + (Feb2022Rev * FEB22_UPS) + (Mar2022Rev * MAR22_UPS) + (Apr2022Rev * APR22_UPS) + (May2022Rev * MAY22_UPS) + (Jun2022Rev * JUN22_UPS) +
		(Jul2022Rev * JUL22_UPS) + (Aug2022Rev * AUG22_UPS) + (Sep2022Rev * SEP22_UPS) + (Oct2022Rev * OCT22_UPS) + (Nov2022Rev * NOV22_UPS) + (Dec2022Rev * DEC22_UPS)) / 
		
		((case when (Jan2019Rev * JAN19_UPS) = 0 then 0 else 1 end) + (case when (Feb2019Rev * FEB19_UPS) = 0 then 0 else 1 end) + (case when (Mar2019Rev * MAR19_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2019Rev * APR19_UPS) = 0 then 0 else 1 end) + (case when (May2019Rev * MAY19_UPS) = 0 then 0 else 1 end) + (case when (Jun2019Rev * JUN19_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2019Rev * JUL19_UPS) = 0 then 0 else 1 end) + (case when (Aug2019Rev * AUG19_UPS) = 0 then 0 else 1 end) + (case when (Sep2019Rev * SEP19_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2019Rev * OCT19_UPS) = 0 then 0 else 1 end) + (case when (Nov2019Rev * NOV19_UPS) = 0 then 0 else 1 end) + (case when (Dec2019Rev * DEC19_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2020Rev * JAN20_UPS) = 0 then 0 else 1 end) + (case when (Feb2020Rev * FEB20_UPS) = 0 then 0 else 1 end) + (case when (Mar2020Rev * MAR20_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2020Rev * APR20_UPS) = 0 then 0 else 1 end) + (case when (May2020Rev * MAY20_UPS) = 0 then 0 else 1 end) + (case when (Jun2020Rev * JUN20_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2020Rev * JUL20_UPS) = 0 then 0 else 1 end) + (case when (Aug2020Rev * AUG20_UPS) = 0 then 0 else 1 end) + (case when (Sep2020Rev * SEP20_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2020Rev * OCT20_UPS) = 0 then 0 else 1 end) + (case when (Nov2020Rev * NOV20_UPS) = 0 then 0 else 1 end) + (case when (Dec2020Rev * DEC20_UPS) = 0 then 0 else 1 end)
		
		+ (case when (Jan2021Rev * JAN21_UPS) = 0 then 0 else 1 end) + (case when (Feb2021Rev * FEB21_UPS) = 0 then 0 else 1 end) + (case when (Mar2021Rev * MAR21_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2021Rev * APR21_UPS) = 0 then 0 else 1 end) + (case when (May2021Rev * MAY21_UPS) = 0 then 0 else 1 end) + (case when (Jun2021Rev * JUN21_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2021Rev * JUL21_UPS) = 0 then 0 else 1 end) + (case when (Aug2021Rev * AUG21_UPS) = 0 then 0 else 1 end) + (case when (Sep2021Rev * SEP21_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2021Rev * OCT21_UPS) = 0 then 0 else 1 end) + (case when (Nov2021Rev * NOV21_UPS) = 0 then 0 else 1 end) + (case when (Dec2021Rev * DEC21_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2022Rev * JAN22_UPS) = 0 then 0 else 1 end) + (case when (Feb2022Rev * FEB22_UPS) = 0 then 0 else 1 end) + (case when (Mar2022Rev * MAR22_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2022Rev * APR22_UPS) = 0 then 0 else 1 end) + (case when (May2022Rev * MAY22_UPS) = 0 then 0 else 1 end) + (case when (Jun2022Rev * JUN22_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2022Rev * JUL22_UPS) = 0 then 0 else 1 end) + (case when (Aug2022Rev * AUG22_UPS) = 0 then 0 else 1 end) + (case when (Sep2022Rev * SEP22_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2022Rev * OCT22_UPS) = 0 then 0 else 1 end) + (case when (Nov2022Rev * NOV22_UPS) = 0 then 0 else 1 end) + (case when (Dec2022Rev * DEC22_UPS) = 0 then 0 else 1 end))) is missing then 0 else 

		(((Jan2019Rev * JAN19_UPS) + (Feb2019Rev * FEB19_UPS) + (Mar2019Rev * MAR19_UPS) + (Apr2019Rev * APR19_UPS) + (May2019Rev * MAY19_UPS) + (Jun2019Rev * JUN19_UPS) +
		(Jul2019Rev * JUL19_UPS) + (Aug2019Rev * AUG19_UPS) + (Sep2019Rev * SEP19_UPS) + (Oct2019Rev * OCT19_UPS) + (Nov2019Rev * NOV19_UPS) + (Dec2019Rev * DEC19_UPS) +

		(Jan2020Rev * JAN20_UPS) + (Feb2020Rev * FEB20_UPS) + (Mar2020Rev * MAR20_UPS) + (Apr2020Rev * APR20_UPS) + (May2020Rev * MAY20_UPS) + (Jun2020Rev * JUN20_UPS) +
		(Jul2020Rev * JUL20_UPS) + (Aug2020Rev * AUG20_UPS) + (Sep2020Rev * SEP20_UPS) + (Oct2020Rev * OCT20_UPS) + (Nov2020Rev * NOV20_UPS) + (Dec2020Rev * DEC20_UPS) + 
		
		(Jan2021Rev * JAN21_UPS) + (Feb2021Rev * FEB21_UPS) + (Mar2021Rev * MAR21_UPS) + (Apr2021Rev * APR21_UPS) + (May2021Rev * MAY21_UPS) + (Jun2021Rev * JUN21_UPS) +
		(Jul2021Rev * JUL21_UPS) + (Aug2021Rev * AUG21_UPS) + (Sep2021Rev * SEP21_UPS) + (Oct2021Rev * OCT21_UPS) + (Nov2021Rev * NOV21_UPS) + (Dec2021Rev * DEC21_UPS) + 

		(Jan2022Rev * JAN22_UPS) + (Feb2022Rev * FEB22_UPS) + (Mar2022Rev * MAR22_UPS) + (Apr2022Rev * APR22_UPS) + (May2022Rev * MAY22_UPS) + (Jun2022Rev * JUN22_UPS) +
		(Jul2022Rev * JUL22_UPS) + (Aug2022Rev * AUG22_UPS) + (Sep2022Rev * SEP22_UPS) + (Oct2022Rev * OCT22_UPS) + (Nov2022Rev * NOV22_UPS) + (Dec2022Rev * DEC22_UPS)) / 
		
		((case when (Jan2019Rev * JAN19_UPS) = 0 then 0 else 1 end) + (case when (Feb2019Rev * FEB19_UPS) = 0 then 0 else 1 end) + (case when (Mar2019Rev * MAR19_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2019Rev * APR19_UPS) = 0 then 0 else 1 end) + (case when (May2019Rev * MAY19_UPS) = 0 then 0 else 1 end) + (case when (Jun2019Rev * JUN19_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2019Rev * JUL19_UPS) = 0 then 0 else 1 end) + (case when (Aug2019Rev * AUG19_UPS) = 0 then 0 else 1 end) + (case when (Sep2019Rev * SEP19_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2019Rev * OCT19_UPS) = 0 then 0 else 1 end) + (case when (Nov2019Rev * NOV19_UPS) = 0 then 0 else 1 end) + (case when (Dec2019Rev * DEC19_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2020Rev * JAN20_UPS) = 0 then 0 else 1 end) + (case when (Feb2020Rev * FEB20_UPS) = 0 then 0 else 1 end) + (case when (Mar2020Rev * MAR20_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2020Rev * APR20_UPS) = 0 then 0 else 1 end) + (case when (May2020Rev * MAY20_UPS) = 0 then 0 else 1 end) + (case when (Jun2020Rev * JUN20_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2020Rev * JUL20_UPS) = 0 then 0 else 1 end) + (case when (Aug2020Rev * AUG20_UPS) = 0 then 0 else 1 end) + (case when (Sep2020Rev * SEP20_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2020Rev * OCT20_UPS) = 0 then 0 else 1 end) + (case when (Nov2020Rev * NOV20_UPS) = 0 then 0 else 1 end) + (case when (Dec2020Rev * DEC20_UPS) = 0 then 0 else 1 end)
		
		+ (case when (Jan2021Rev * JAN21_UPS) = 0 then 0 else 1 end) + (case when (Feb2021Rev * FEB21_UPS) = 0 then 0 else 1 end) + (case when (Mar2021Rev * MAR21_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2021Rev * APR21_UPS) = 0 then 0 else 1 end) + (case when (May2021Rev * MAY21_UPS) = 0 then 0 else 1 end) + (case when (Jun2021Rev * JUN21_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2021Rev * JUL21_UPS) = 0 then 0 else 1 end) + (case when (Aug2021Rev * AUG21_UPS) = 0 then 0 else 1 end) + (case when (Sep2021Rev * SEP21_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2021Rev * OCT21_UPS) = 0 then 0 else 1 end) + (case when (Nov2021Rev * NOV21_UPS) = 0 then 0 else 1 end) + (case when (Dec2021Rev * DEC21_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2022Rev * JAN22_UPS) = 0 then 0 else 1 end) + (case when (Feb2022Rev * FEB22_UPS) = 0 then 0 else 1 end) + (case when (Mar2022Rev * MAR22_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2022Rev * APR22_UPS) = 0 then 0 else 1 end) + (case when (May2022Rev * MAY22_UPS) = 0 then 0 else 1 end) + (case when (Jun2022Rev * JUN22_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2022Rev * JUL22_UPS) = 0 then 0 else 1 end) + (case when (Aug2022Rev * AUG22_UPS) = 0 then 0 else 1 end) + (case when (Sep2022Rev * SEP22_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2022Rev * OCT22_UPS) = 0 then 0 else 1 end) + (case when (Nov2022Rev * NOV22_UPS) = 0 then 0 else 1 end) + (case when (Dec2022Rev * DEC22_UPS) = 0 then 0 else 1 end))) end) as Upsell_AVGREV,

		Projected_Bill,

		((case when UPSELL_ONLY_COMP = 'Y' and ((Jan2019Rev * JAN19_ACT) > calculated Upsell_AVGREV) then (Jan2019Rev * JAN19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JAN2019_TCV/JAN2019_TCV_PROP)) AS JAN2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Feb2019Rev * FEB19_ACT) > calculated Upsell_AVGREV) then (Feb2019Rev * FEB19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (FEB2019_TCV/FEB2019_TCV_PROP)) AS FEB2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Mar2019Rev * MAR19_ACT) > calculated Upsell_AVGREV) then (Mar2019Rev * MAR19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAR2019_TCV/MAR2019_TCV_PROP)) AS MAR2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Apr2019Rev * APR19_ACT) > calculated Upsell_AVGREV) then (Apr2019Rev * APR19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (APR2019_TCV/APR2019_TCV_PROP)) AS APR2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((May2019Rev * MAY19_ACT) > calculated Upsell_AVGREV) then (May2019Rev * MAY19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAY2019_TCV/MAY2019_TCV_PROP)) AS MAY2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jun2019Rev * JUN19_ACT) > calculated Upsell_AVGREV) then (Jun2019Rev * JUN19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUN2019_TCV/JUN2019_TCV_PROP)) AS JUN2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jul2019Rev * JUL19_ACT) > calculated Upsell_AVGREV) then (Jul2019Rev * JUL19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUL2019_TCV/JUL2019_TCV_PROP)) AS JUL2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Aug2019Rev * AUG19_ACT) > calculated Upsell_AVGREV) then (Aug2019Rev * AUG19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (AUG2019_TCV/AUG2019_TCV_PROP)) AS AUG2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Sep2019Rev * SEP19_ACT) > calculated Upsell_AVGREV) then (Sep2019Rev * SEP19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (SEP2019_TCV/SEP2019_TCV_PROP)) AS SEP2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Oct2019Rev * OCT19_ACT) > calculated Upsell_AVGREV) then (Oct2019Rev * OCT19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (OCT2019_TCV/OCT2019_TCV_PROP)) AS OCT2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Nov2019Rev * NOV19_ACT) > calculated Upsell_AVGREV) then (Nov2019Rev * NOV19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (NOV2019_TCV/NOV2019_TCV_PROP)) AS NOV2019_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Dec2019Rev * DEC19_ACT) > calculated Upsell_AVGREV) then (Dec2019Rev * DEC19_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (DEC2019_TCV/DEC2019_TCV_PROP)) AS DEC2019_ACTREV,

		((case when UPSELL_ONLY_COMP = 'Y' and ((Jan2020Rev * JAN20_ACT) > calculated Upsell_AVGREV) then (Jan2020Rev * JAN20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JAN2020_TCV/JAN2020_TCV_PROP)) AS JAN2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Feb2020Rev * FEB20_ACT) > calculated Upsell_AVGREV) then (Feb2020Rev * FEB20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (FEB2020_TCV/FEB2020_TCV_PROP)) AS FEB2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Mar2020Rev * MAR20_ACT) > calculated Upsell_AVGREV) then (Mar2020Rev * MAR20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAR2020_TCV/MAR2020_TCV_PROP)) AS MAR2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Apr2020Rev * APR20_ACT) > calculated Upsell_AVGREV) then (Apr2020Rev * APR20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (APR2020_TCV/APR2020_TCV_PROP)) AS APR2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((May2020Rev * MAY20_ACT) > calculated Upsell_AVGREV) then (May2020Rev * MAY20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAY2020_TCV/MAY2020_TCV_PROP)) AS MAY2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jun2020Rev * JUN20_ACT) > calculated Upsell_AVGREV) then (Jun2020Rev * JUN20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUN2020_TCV/JUN2020_TCV_PROP)) AS JUN2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jul2020Rev * JUL20_ACT) > calculated Upsell_AVGREV) then (Jul2020Rev * JUL20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUL2020_TCV/JUL2020_TCV_PROP)) AS JUL2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Aug2020Rev * AUG20_ACT) > calculated Upsell_AVGREV) then (Aug2020Rev * AUG20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (AUG2020_TCV/AUG2020_TCV_PROP)) AS AUG2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Sep2020Rev * SEP20_ACT) > calculated Upsell_AVGREV) then (Sep2020Rev * SEP20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (SEP2020_TCV/SEP2020_TCV_PROP)) AS SEP2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Oct2020Rev * OCT20_ACT) > calculated Upsell_AVGREV) then (Oct2020Rev * OCT20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (OCT2020_TCV/OCT2020_TCV_PROP)) AS OCT2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Nov2020Rev * NOV20_ACT) > calculated Upsell_AVGREV) then (Nov2020Rev * NOV20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (NOV2020_TCV/NOV2020_TCV_PROP)) AS NOV2020_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Dec2020Rev * DEC20_ACT) > calculated Upsell_AVGREV) then (Dec2020Rev * DEC20_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (DEC2020_TCV/DEC2020_TCV_PROP)) AS DEC2020_ACTREV,

		((case when UPSELL_ONLY_COMP = 'Y' and ((Jan2021Rev * JAN21_ACT) > calculated Upsell_AVGREV) then (Jan2021Rev * JAN21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JAN2021_TCV/JAN2021_TCV_PROP)) AS JAN2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Feb2021Rev * FEB21_ACT) > calculated Upsell_AVGREV) then (Feb2021Rev * FEB21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (FEB2021_TCV/FEB2021_TCV_PROP)) AS FEB2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Mar2021Rev * MAR21_ACT) > calculated Upsell_AVGREV) then (Mar2021Rev * MAR21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAR2021_TCV/MAR2021_TCV_PROP)) AS MAR2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Apr2021Rev * APR21_ACT) > calculated Upsell_AVGREV) then (Apr2021Rev * APR21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (APR2021_TCV/APR2021_TCV_PROP)) AS APR2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((May2021Rev * MAY21_ACT) > calculated Upsell_AVGREV) then (May2021Rev * MAY21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAY2021_TCV/MAY2021_TCV_PROP)) AS MAY2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jun2021Rev * JUN21_ACT) > calculated Upsell_AVGREV) then (Jun2021Rev * JUN21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUN2021_TCV/JUN2021_TCV_PROP)) AS JUN2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jul2021Rev * JUL21_ACT) > calculated Upsell_AVGREV) then (Jul2021Rev * JUL21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUL2021_TCV/JUL2021_TCV_PROP)) AS JUL2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Aug2021Rev * AUG21_ACT) > calculated Upsell_AVGREV) then (Aug2021Rev * AUG21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (AUG2021_TCV/AUG2021_TCV_PROP)) AS AUG2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Sep2021Rev * SEP21_ACT) > calculated Upsell_AVGREV) then (Sep2021Rev * SEP21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (SEP2021_TCV/SEP2021_TCV_PROP)) AS SEP2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Oct2021Rev * OCT21_ACT) > calculated Upsell_AVGREV) then (Oct2021Rev * OCT21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (OCT2021_TCV/OCT2021_TCV_PROP)) AS OCT2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Nov2021Rev * NOV21_ACT) > calculated Upsell_AVGREV) then (Nov2021Rev * NOV21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (NOV2021_TCV/NOV2021_TCV_PROP)) AS NOV2021_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Dec2021Rev * DEC21_ACT) > calculated Upsell_AVGREV) then (Dec2021Rev * DEC21_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (DEC2021_TCV/DEC2021_TCV_PROP)) AS DEC2021_ACTREV,

		((case when UPSELL_ONLY_COMP = 'Y' and ((Jan2022Rev * JAN22_ACT) > calculated Upsell_AVGREV) then (Jan2022Rev * JAN22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JAN2022_TCV/JAN2022_TCV_PROP)) AS JAN2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Feb2022Rev * FEB22_ACT) > calculated Upsell_AVGREV) then (Feb2022Rev * FEB22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (FEB2022_TCV/FEB2022_TCV_PROP)) AS FEB2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Mar2022Rev * MAR22_ACT) > calculated Upsell_AVGREV) then (Mar2022Rev * MAR22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAR2022_TCV/MAR2022_TCV_PROP)) AS MAR2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Apr2022Rev * APR22_ACT) > calculated Upsell_AVGREV) then (Apr2022Rev * APR22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (APR2022_TCV/APR2022_TCV_PROP)) AS APR2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((May2022Rev * MAY22_ACT) > calculated Upsell_AVGREV) then (May2022Rev * MAY22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (MAY2022_TCV/MAY2022_TCV_PROP)) AS MAY2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jun2022Rev * JUN22_ACT) > calculated Upsell_AVGREV) then (Jun2022Rev * JUN22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUN2022_TCV/JUN2022_TCV_PROP)) AS JUN2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Jul2022Rev * JUL22_ACT) > calculated Upsell_AVGREV) then (Jul2022Rev * JUL22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (JUL2022_TCV/JUL2022_TCV_PROP)) AS JUL2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Aug2022Rev * AUG22_ACT) > calculated Upsell_AVGREV) then (Aug2022Rev * AUG22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (AUG2022_TCV/AUG2022_TCV_PROP)) AS AUG2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Sep2022Rev * SEP22_ACT) > calculated Upsell_AVGREV) then (Sep2022Rev * SEP22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (SEP2022_TCV/SEP2022_TCV_PROP)) AS SEP2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Oct2022Rev * OCT22_ACT) > calculated Upsell_AVGREV) then (Oct2022Rev * OCT22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (OCT2022_TCV/OCT2022_TCV_PROP)) AS OCT2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Nov2022Rev * NOV22_ACT) > calculated Upsell_AVGREV) then (Nov2022Rev * NOV22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (NOV2022_TCV/NOV2022_TCV_PROP)) AS NOV2022_ACTREV,
		((case when UPSELL_ONLY_COMP = 'Y' and ((Dec2022Rev * DEC22_ACT) > calculated Upsell_AVGREV) then (Dec2022Rev * DEC22_ACT) - calculated Upsell_AVGREV 
		else 0 end) * (DEC2022_TCV/DEC2022_TCV_PROP)) AS DEC2022_ACTREV

		from RevReal1.SALES_MOTION_SUMMARY_RR0 a left join RevReal1.TOTALTCV_REVPROP b
		on a.COMPANY_NUMBER = b.COMPANY_NUMBER and a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO
		WHERE UPSELL_ONLY_COMP = 'Y'
UNION CORR
		select
		a.COMPANY_NUMBER,
		COMPANY_NAME,
		ENTITY_CODE,
		ENTITY_NAME,
		OPPORTUNITYID,
		OPP_DURATION,
		OPP_CONTRACT_START_DATE,
		OPPORTUNITY_CLOSE_DATE,
		OPPORTUNITY_CLOSE_YEAR,
		OPPORTUNITY_CLOSE_MONTH,
		OPPORTUNITY_CREATE_DATE,
		OPP_SALES_MOTION,
		OPP_SALES_MOTION_CONVERTED,
		OPP_LINE_SALES_MOTION,
		OPP_LINE_MOTION_DETAIL,
		OPPORTUNITY_NAME,
		OPPORTUNITY_PRODUCT_NAME,
		OPP_TIMEFRAME,
		TOTAL_CONTRACT_VARIANCE,
		CUSTOMER_TYPE,
		OPP_WEST_BUSINESS_UNIT,
		OPP_TCV_CLASSIFICATION,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		a.FINANCE_PRODUCT_COMBO,
		OPP_PRODUCT_TCV_USD,
		OPP_PROD_FAM_ACV,
		ProdFamACV,
		WIPC_Partner,
		Segment,
		REV_SOURCEDATA,
		OPP_MATCH_REASON,
		OPP_MATCH_STATUS,
		UPSELL_ONLY_COMP,
		OPP_CONTRACT_START_DATE_A,
		NEW_CONTRACT_START_DATE,
		NEW_CONTRACT_END_DATE,
		CURRENT_DATE,
		LAPSE_STATUS,

		(case when (((Jan2019Rev * JAN19_UPS) + (Feb2019Rev * FEB19_UPS) + (Mar2019Rev * MAR19_UPS) + (Apr2019Rev * APR19_UPS) + (May2019Rev * MAY19_UPS) + (Jun2019Rev * JUN19_UPS) +
		(Jul2019Rev * JUL19_UPS) + (Aug2019Rev * AUG19_UPS) + (Sep2019Rev * SEP19_UPS) + (Oct2019Rev * OCT19_UPS) + (Nov2019Rev * NOV19_UPS) + (Dec2019Rev * DEC19_UPS) +
		
		(Jan2020Rev * JAN20_UPS) + (Feb2020Rev * FEB20_UPS) + (Mar2020Rev * MAR20_UPS) + (Apr2020Rev * APR20_UPS) + (May2020Rev * MAY20_UPS) + (Jun2020Rev * JUN20_UPS) +
		(Jul2020Rev * JUL20_UPS) + (Aug2020Rev * AUG20_UPS) + (Sep2020Rev * SEP20_UPS) + (Oct2020Rev * OCT20_UPS) + (Nov2020Rev * NOV20_UPS) + (Dec2020Rev * DEC20_UPS) + 
		
		(Jan2021Rev * JAN21_UPS) + (Feb2021Rev * FEB21_UPS) + (Mar2021Rev * MAR21_UPS) + (Apr2021Rev * APR21_UPS) + (May2021Rev * MAY21_UPS) + (Jun2021Rev * JUN21_UPS) +
		(Jul2021Rev * JUL21_UPS) + (Aug2021Rev * AUG21_UPS) + (Sep2021Rev * SEP21_UPS) + (Oct2021Rev * OCT21_UPS) + (Nov2021Rev * NOV21_UPS) + (Dec2021Rev * DEC21_UPS) + 

		(Jan2022Rev * JAN22_UPS) + (Feb2022Rev * FEB22_UPS) + (Mar2022Rev * MAR22_UPS) + (Apr2022Rev * APR22_UPS) + (May2022Rev * MAY22_UPS) + (Jun2022Rev * JUN22_UPS) +
		(Jul2022Rev * JUL22_UPS) + (Aug2022Rev * AUG22_UPS) + (Sep2022Rev * SEP22_UPS) + (Oct2022Rev * OCT22_UPS) + (Nov2022Rev * NOV22_UPS) + (Dec2022Rev * DEC22_UPS)) / 
		
		((case when (Jan2019Rev * JAN19_UPS) = 0 then 0 else 1 end) + (case when (Feb2019Rev * FEB19_UPS) = 0 then 0 else 1 end) + (case when (Mar2019Rev * MAR19_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2019Rev * APR19_UPS) = 0 then 0 else 1 end) + (case when (May2019Rev * MAY19_UPS) = 0 then 0 else 1 end) + (case when (Jun2019Rev * JUN19_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2019Rev * JUL19_UPS) = 0 then 0 else 1 end) + (case when (Aug2019Rev * AUG19_UPS) = 0 then 0 else 1 end) + (case when (Sep2019Rev * SEP19_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2019Rev * OCT19_UPS) = 0 then 0 else 1 end) + (case when (Nov2019Rev * NOV19_UPS) = 0 then 0 else 1 end) + (case when (Dec2019Rev * DEC19_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2020Rev * JAN20_UPS) = 0 then 0 else 1 end) + (case when (Feb2020Rev * FEB20_UPS) = 0 then 0 else 1 end) + (case when (Mar2020Rev * MAR20_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2020Rev * APR20_UPS) = 0 then 0 else 1 end) + (case when (May2020Rev * MAY20_UPS) = 0 then 0 else 1 end) + (case when (Jun2020Rev * JUN20_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2020Rev * JUL20_UPS) = 0 then 0 else 1 end) + (case when (Aug2020Rev * AUG20_UPS) = 0 then 0 else 1 end) + (case when (Sep2020Rev * SEP20_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2020Rev * OCT20_UPS) = 0 then 0 else 1 end) + (case when (Nov2020Rev * NOV20_UPS) = 0 then 0 else 1 end) + (case when (Dec2020Rev * DEC20_UPS) = 0 then 0 else 1 end)
		
		+ (case when (Jan2021Rev * JAN21_UPS) = 0 then 0 else 1 end) + (case when (Feb2021Rev * FEB21_UPS) = 0 then 0 else 1 end) + (case when (Mar2021Rev * MAR21_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2021Rev * APR21_UPS) = 0 then 0 else 1 end) + (case when (May2021Rev * MAY21_UPS) = 0 then 0 else 1 end) + (case when (Jun2021Rev * JUN21_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2021Rev * JUL21_UPS) = 0 then 0 else 1 end) + (case when (Aug2021Rev * AUG21_UPS) = 0 then 0 else 1 end) + (case when (Sep2021Rev * SEP21_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2021Rev * OCT21_UPS) = 0 then 0 else 1 end) + (case when (Nov2021Rev * NOV21_UPS) = 0 then 0 else 1 end) + (case when (Dec2021Rev * DEC21_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2022Rev * JAN22_UPS) = 0 then 0 else 1 end) + (case when (Feb2022Rev * FEB22_UPS) = 0 then 0 else 1 end) + (case when (Mar2022Rev * MAR22_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2022Rev * APR22_UPS) = 0 then 0 else 1 end) + (case when (May2022Rev * MAY22_UPS) = 0 then 0 else 1 end) + (case when (Jun2022Rev * JUN22_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2022Rev * JUL22_UPS) = 0 then 0 else 1 end) + (case when (Aug2022Rev * AUG22_UPS) = 0 then 0 else 1 end) + (case when (Sep2022Rev * SEP22_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2022Rev * OCT22_UPS) = 0 then 0 else 1 end) + (case when (Nov2022Rev * NOV22_UPS) = 0 then 0 else 1 end) + (case when (Dec2022Rev * DEC22_UPS) = 0 then 0 else 1 end))) is missing then 0 else 

		(((Jan2019Rev * JAN19_UPS) + (Feb2019Rev * FEB19_UPS) + (Mar2019Rev * MAR19_UPS) + (Apr2019Rev * APR19_UPS) + (May2019Rev * MAY19_UPS) + (Jun2019Rev * JUN19_UPS) +
		(Jul2019Rev * JUL19_UPS) + (Aug2019Rev * AUG19_UPS) + (Sep2019Rev * SEP19_UPS) + (Oct2019Rev * OCT19_UPS) + (Nov2019Rev * NOV19_UPS) + (Dec2019Rev * DEC19_UPS) +
		
		(Jan2020Rev * JAN20_UPS) + (Feb2020Rev * FEB20_UPS) + (Mar2020Rev * MAR20_UPS) + (Apr2020Rev * APR20_UPS) + (May2020Rev * MAY20_UPS) + (Jun2020Rev * JUN20_UPS) +
		(Jul2020Rev * JUL20_UPS) + (Aug2020Rev * AUG20_UPS) + (Sep2020Rev * SEP20_UPS) + (Oct2020Rev * OCT20_UPS) + (Nov2020Rev * NOV20_UPS) + (Dec2020Rev * DEC20_UPS) + 
		
		(Jan2021Rev * JAN21_UPS) + (Feb2021Rev * FEB21_UPS) + (Mar2021Rev * MAR21_UPS) + (Apr2021Rev * APR21_UPS) + (May2021Rev * MAY21_UPS) + (Jun2021Rev * JUN21_UPS) +
		(Jul2021Rev * JUL21_UPS) + (Aug2021Rev * AUG21_UPS) + (Sep2021Rev * SEP21_UPS) + (Oct2021Rev * OCT21_UPS) + (Nov2021Rev * NOV21_UPS) + (Dec2021Rev * DEC21_UPS) + 

		(Jan2022Rev * JAN22_UPS) + (Feb2022Rev * FEB22_UPS) + (Mar2022Rev * MAR22_UPS) + (Apr2022Rev * APR22_UPS) + (May2022Rev * MAY22_UPS) + (Jun2022Rev * JUN22_UPS) +
		(Jul2022Rev * JUL22_UPS) + (Aug2022Rev * AUG22_UPS) + (Sep2022Rev * SEP22_UPS) + (Oct2022Rev * OCT22_UPS) + (Nov2022Rev * NOV22_UPS) + (Dec2022Rev * DEC22_UPS)) / 
		
		((case when (Jan2019Rev * JAN19_UPS) = 0 then 0 else 1 end) + (case when (Feb2019Rev * FEB19_UPS) = 0 then 0 else 1 end) + (case when (Mar2019Rev * MAR19_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2019Rev * APR19_UPS) = 0 then 0 else 1 end) + (case when (May2019Rev * MAY19_UPS) = 0 then 0 else 1 end) + (case when (Jun2019Rev * JUN19_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2019Rev * JUL19_UPS) = 0 then 0 else 1 end) + (case when (Aug2019Rev * AUG19_UPS) = 0 then 0 else 1 end) + (case when (Sep2019Rev * SEP19_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2019Rev * OCT19_UPS) = 0 then 0 else 1 end) + (case when (Nov2019Rev * NOV19_UPS) = 0 then 0 else 1 end) + (case when (Dec2019Rev * DEC19_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2020Rev * JAN20_UPS) = 0 then 0 else 1 end) + (case when (Feb2020Rev * FEB20_UPS) = 0 then 0 else 1 end) + (case when (Mar2020Rev * MAR20_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2020Rev * APR20_UPS) = 0 then 0 else 1 end) + (case when (May2020Rev * MAY20_UPS) = 0 then 0 else 1 end) + (case when (Jun2020Rev * JUN20_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2020Rev * JUL20_UPS) = 0 then 0 else 1 end) + (case when (Aug2020Rev * AUG20_UPS) = 0 then 0 else 1 end) + (case when (Sep2020Rev * SEP20_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2020Rev * OCT20_UPS) = 0 then 0 else 1 end) + (case when (Nov2020Rev * NOV20_UPS) = 0 then 0 else 1 end) + (case when (Dec2020Rev * DEC20_UPS) = 0 then 0 else 1 end)
		
		+ (case when (Jan2021Rev * JAN21_UPS) = 0 then 0 else 1 end) + (case when (Feb2021Rev * FEB21_UPS) = 0 then 0 else 1 end) + (case when (Mar2021Rev * MAR21_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2021Rev * APR21_UPS) = 0 then 0 else 1 end) + (case when (May2021Rev * MAY21_UPS) = 0 then 0 else 1 end) + (case when (Jun2021Rev * JUN21_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2021Rev * JUL21_UPS) = 0 then 0 else 1 end) + (case when (Aug2021Rev * AUG21_UPS) = 0 then 0 else 1 end) + (case when (Sep2021Rev * SEP21_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2021Rev * OCT21_UPS) = 0 then 0 else 1 end) + (case when (Nov2021Rev * NOV21_UPS) = 0 then 0 else 1 end) + (case when (Dec2021Rev * DEC21_UPS) = 0 then 0 else 1 end)

		+ (case when (Jan2022Rev * JAN22_UPS) = 0 then 0 else 1 end) + (case when (Feb2022Rev * FEB22_UPS) = 0 then 0 else 1 end) + (case when (Mar2022Rev * MAR22_UPS) = 0 then 0 else 1 end)
		+ (case when (Apr2022Rev * APR22_UPS) = 0 then 0 else 1 end) + (case when (May2022Rev * MAY22_UPS) = 0 then 0 else 1 end) + (case when (Jun2022Rev * JUN22_UPS) = 0 then 0 else 1 end)
		+ (case when (Jul2022Rev * JUL22_UPS) = 0 then 0 else 1 end) + (case when (Aug2022Rev * AUG22_UPS) = 0 then 0 else 1 end) + (case when (Sep2022Rev * SEP22_UPS) = 0 then 0 else 1 end)
		+ (case when (Oct2022Rev * OCT22_UPS) = 0 then 0 else 1 end) + (case when (Nov2022Rev * NOV22_UPS) = 0 then 0 else 1 end) + (case when (Dec2022Rev * DEC22_UPS) = 0 then 0 else 1 end))) end) as Upsell_AVGREV,

		Projected_Bill,

		(Jan2019Rev * (JAN2019_TCV/JAN2019_TCV_PROP)) AS JAN2019_ACTREV,
		(Feb2019Rev * (FEB2019_TCV/FEB2019_TCV_PROP)) AS FEB2019_ACTREV,
		(Mar2019Rev * (MAR2019_TCV/MAR2019_TCV_PROP)) AS MAR2019_ACTREV,
		(Apr2019Rev * (APR2019_TCV/APR2019_TCV_PROP)) AS APR2019_ACTREV,
		(May2019Rev * (MAY2019_TCV/MAY2019_TCV_PROP)) AS MAY2019_ACTREV,
		(Jun2019Rev * (JUN2019_TCV/JUN2019_TCV_PROP)) AS JUN2019_ACTREV,
		(Jul2019Rev * (JUL2019_TCV/JUL2019_TCV_PROP)) AS JUL2019_ACTREV,
		(Aug2019Rev * (AUG2019_TCV/AUG2019_TCV_PROP)) AS AUG2019_ACTREV,
		(Sep2019Rev * (SEP2019_TCV/SEP2019_TCV_PROP)) AS SEP2019_ACTREV,
		(Oct2019Rev * (OCT2019_TCV/OCT2019_TCV_PROP)) AS OCT2019_ACTREV,
		(Nov2019Rev * (NOV2019_TCV/NOV2019_TCV_PROP)) AS NOV2019_ACTREV,
		(Dec2019Rev * (DEC2019_TCV/DEC2019_TCV_PROP)) AS DEC2019_ACTREV,

		(Jan2020Rev * (JAN2020_TCV/JAN2020_TCV_PROP)) AS JAN2020_ACTREV,
		(Feb2020Rev * (FEB2020_TCV/FEB2020_TCV_PROP)) AS FEB2020_ACTREV,
		(Mar2020Rev * (MAR2020_TCV/MAR2020_TCV_PROP)) AS MAR2020_ACTREV,
		(Apr2020Rev * (APR2020_TCV/APR2020_TCV_PROP)) AS APR2020_ACTREV,
		(May2020Rev * (MAY2020_TCV/MAY2020_TCV_PROP)) AS MAY2020_ACTREV,
		(Jun2020Rev * (JUN2020_TCV/JUN2020_TCV_PROP)) AS JUN2020_ACTREV,
		(Jul2020Rev * (JUL2020_TCV/JUL2020_TCV_PROP)) AS JUL2020_ACTREV,
		(Aug2020Rev * (AUG2020_TCV/AUG2020_TCV_PROP)) AS AUG2020_ACTREV,
		(Sep2020Rev * (SEP2020_TCV/SEP2020_TCV_PROP)) AS SEP2020_ACTREV,
		(Oct2020Rev * (OCT2020_TCV/OCT2020_TCV_PROP)) AS OCT2020_ACTREV,
		(Nov2020Rev * (NOV2020_TCV/NOV2020_TCV_PROP)) AS NOV2020_ACTREV,
		(Dec2020Rev * (DEC2020_TCV/DEC2020_TCV_PROP)) AS DEC2020_ACTREV,

		(Jan2021Rev * (JAN2021_TCV/JAN2021_TCV_PROP)) AS JAN2021_ACTREV,
		(Feb2021Rev * (FEB2021_TCV/FEB2021_TCV_PROP)) AS FEB2021_ACTREV,
		(Mar2021Rev * (MAR2021_TCV/MAR2021_TCV_PROP)) AS MAR2021_ACTREV,
		(Apr2021Rev * (APR2021_TCV/APR2021_TCV_PROP)) AS APR2021_ACTREV,
		(May2021Rev * (MAY2021_TCV/MAY2021_TCV_PROP)) AS MAY2021_ACTREV,
		(Jun2021Rev * (JUN2021_TCV/JUN2021_TCV_PROP)) AS JUN2021_ACTREV,
		(Jul2021Rev * (JUL2021_TCV/JUL2021_TCV_PROP)) AS JUL2021_ACTREV,
		(Aug2021Rev * (AUG2021_TCV/AUG2021_TCV_PROP)) AS AUG2021_ACTREV,
		(Sep2021Rev * (SEP2021_TCV/SEP2021_TCV_PROP)) AS SEP2021_ACTREV,
		(Oct2021Rev * (OCT2021_TCV/OCT2021_TCV_PROP)) AS OCT2021_ACTREV,
		(Nov2021Rev * (NOV2021_TCV/NOV2021_TCV_PROP)) AS NOV2021_ACTREV,
		(Dec2021Rev * (DEC2021_TCV/DEC2021_TCV_PROP)) AS DEC2021_ACTREV,

		(Jan2022Rev * (JAN2022_TCV/JAN2022_TCV_PROP)) AS JAN2022_ACTREV,
		(Feb2022Rev * (FEB2022_TCV/FEB2022_TCV_PROP)) AS FEB2022_ACTREV,
		(Mar2022Rev * (MAR2022_TCV/MAR2022_TCV_PROP)) AS MAR2022_ACTREV,
		(Apr2022Rev * (APR2022_TCV/APR2022_TCV_PROP)) AS APR2022_ACTREV,
		(May2022Rev * (MAY2022_TCV/MAY2022_TCV_PROP)) AS MAY2022_ACTREV,
		(Jun2022Rev * (JUN2022_TCV/JUN2022_TCV_PROP)) AS JUN2022_ACTREV,
		(Jul2022Rev * (JUL2022_TCV/JUL2022_TCV_PROP)) AS JUL2022_ACTREV,
		(Aug2022Rev * (AUG2022_TCV/AUG2022_TCV_PROP)) AS AUG2022_ACTREV,
		(Sep2022Rev * (SEP2022_TCV/SEP2022_TCV_PROP)) AS SEP2022_ACTREV,
		(Oct2022Rev * (OCT2022_TCV/OCT2022_TCV_PROP)) AS OCT2022_ACTREV,
		(Nov2022Rev * (NOV2022_TCV/NOV2022_TCV_PROP)) AS NOV2022_ACTREV,
		(Dec2022Rev * (DEC2022_TCV/DEC2022_TCV_PROP)) AS DEC2022_ACTREV

		from RevReal1.SALES_MOTION_SUMMARY_RR0 a left join RevReal1.TOTALTCV_REVPROP b on
		a.COMPANY_NUMBER = b.COMPANY_NUMBER and a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO
		WHERE UPSELL_ONLY_COMP <> 'Y';
quit;

/*25.4*/
proc sql;
	create table RevReal1.SALES_MOTION_SUMMARY_RR2 as
	select
	COMPANY_NUMBER,
	COMPANY_NAME,
	ENTITY_CODE,
	ENTITY_NAME,
	OPPORTUNITYID,
	OPP_DURATION,
	OPP_CONTRACT_START_DATE,
	OPPORTUNITY_CLOSE_DATE,
	OPPORTUNITY_CLOSE_YEAR,
	OPPORTUNITY_CLOSE_MONTH,
	OPPORTUNITY_CREATE_DATE,
	OPP_SALES_MOTION,
	OPP_SALES_MOTION_CONVERTED,
	OPP_LINE_SALES_MOTION,
	OPP_LINE_MOTION_DETAIL,
	OPP_LINE_SALES_MOTION as OPP_LINE_MOTION_DD,
	OPP_LINE_MOTION_DETAIL as OPP_LINE_MOTION_DETAIL_DD, 
	OPPORTUNITY_NAME,
	OPPORTUNITY_PRODUCT_NAME,
	OPP_TIMEFRAME,
	TOTAL_CONTRACT_VARIANCE,
	CUSTOMER_TYPE,
	OPP_WEST_BUSINESS_UNIT,
	OPP_TCV_CLASSIFICATION,
	FINANCE_PRODUCT_GSO,
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	FINANCE_PRODUCT_COMBO,
	OPP_PRODUCT_TCV_USD,
	OPP_PROD_FAM_ACV,
	ProdFamACV,
	WIPC_Partner,
	Segment,
	REV_SOURCEDATA,
	OPP_MATCH_REASON,
	OPP_MATCH_STATUS,
	UPSELL_ONLY_COMP,
	OPP_CONTRACT_START_DATE_A,
	NEW_CONTRACT_START_DATE,
	NEW_CONTRACT_END_DATE,
	CURRENT_DATE,
	LAPSE_STATUS,
	Upsell_AVGREV,
	Projected_Bill,

	(CASE WHEN JAN2019_ACTREV = . THEN 0 ELSE JAN2019_ACTREV END) AS JAN2019_ACTREV,
	(CASE WHEN FEB2019_ACTREV = . THEN 0 ELSE FEB2019_ACTREV END) AS FEB2019_ACTREV,
	(CASE WHEN MAR2019_ACTREV = . THEN 0 ELSE MAR2019_ACTREV END) AS MAR2019_ACTREV,
	(CASE WHEN APR2019_ACTREV = . THEN 0 ELSE APR2019_ACTREV END) AS APR2019_ACTREV,
	(CASE WHEN MAY2019_ACTREV = . THEN 0 ELSE MAY2019_ACTREV END) AS MAY2019_ACTREV,
	(CASE WHEN JUN2019_ACTREV = . THEN 0 ELSE JUN2019_ACTREV END) AS JUN2019_ACTREV,
	(CASE WHEN JUL2019_ACTREV = . THEN 0 ELSE JUL2019_ACTREV END) AS JUL2019_ACTREV,
	(CASE WHEN AUG2019_ACTREV = . THEN 0 ELSE AUG2019_ACTREV END) AS AUG2019_ACTREV,
	(CASE WHEN SEP2019_ACTREV = . THEN 0 ELSE SEP2019_ACTREV END) AS SEP2019_ACTREV,
	(CASE WHEN OCT2019_ACTREV = . THEN 0 ELSE OCT2019_ACTREV END) AS OCT2019_ACTREV,
	(CASE WHEN NOV2019_ACTREV = . THEN 0 ELSE NOV2019_ACTREV END) AS NOV2019_ACTREV,
	(CASE WHEN DEC2019_ACTREV = . THEN 0 ELSE DEC2019_ACTREV END) AS DEC2019_ACTREV,

	(CASE WHEN JAN2020_ACTREV = . THEN 0 ELSE JAN2020_ACTREV END) AS JAN2020_ACTREV,
	(CASE WHEN FEB2020_ACTREV = . THEN 0 ELSE FEB2020_ACTREV END) AS FEB2020_ACTREV,
	(CASE WHEN MAR2020_ACTREV = . THEN 0 ELSE MAR2020_ACTREV END) AS MAR2020_ACTREV,
	(CASE WHEN APR2020_ACTREV = . THEN 0 ELSE APR2020_ACTREV END) AS APR2020_ACTREV,
	(CASE WHEN MAY2020_ACTREV = . THEN 0 ELSE MAY2020_ACTREV END) AS MAY2020_ACTREV,
	(CASE WHEN JUN2020_ACTREV = . THEN 0 ELSE JUN2020_ACTREV END) AS JUN2020_ACTREV,
	(CASE WHEN JUL2020_ACTREV = . THEN 0 ELSE JUL2020_ACTREV END) AS JUL2020_ACTREV,
	(CASE WHEN AUG2020_ACTREV = . THEN 0 ELSE AUG2020_ACTREV END) AS AUG2020_ACTREV,
	(CASE WHEN SEP2020_ACTREV = . THEN 0 ELSE SEP2020_ACTREV END) AS SEP2020_ACTREV,
	(CASE WHEN OCT2020_ACTREV = . THEN 0 ELSE OCT2020_ACTREV END) AS OCT2020_ACTREV,
	(CASE WHEN NOV2020_ACTREV = . THEN 0 ELSE NOV2020_ACTREV END) AS NOV2020_ACTREV,
	(CASE WHEN DEC2020_ACTREV = . THEN 0 ELSE DEC2020_ACTREV END) AS DEC2020_ACTREV,

	(CASE WHEN JAN2021_ACTREV = . THEN 0 ELSE JAN2021_ACTREV END) AS JAN2021_ACTREV,
	(CASE WHEN FEB2021_ACTREV = . THEN 0 ELSE FEB2021_ACTREV END) AS FEB2021_ACTREV,
	(CASE WHEN MAR2021_ACTREV = . THEN 0 ELSE MAR2021_ACTREV END) AS MAR2021_ACTREV,
	(CASE WHEN APR2021_ACTREV = . THEN 0 ELSE APR2021_ACTREV END) AS APR2021_ACTREV,
	(CASE WHEN MAY2021_ACTREV = . THEN 0 ELSE MAY2021_ACTREV END) AS MAY2021_ACTREV,
	(CASE WHEN JUN2021_ACTREV = . THEN 0 ELSE JUN2021_ACTREV END) AS JUN2021_ACTREV,
	(CASE WHEN JUL2021_ACTREV = . THEN 0 ELSE JUL2021_ACTREV END) AS JUL2021_ACTREV,
	(CASE WHEN AUG2021_ACTREV = . THEN 0 ELSE AUG2021_ACTREV END) AS AUG2021_ACTREV,
	(CASE WHEN SEP2021_ACTREV = . THEN 0 ELSE SEP2021_ACTREV END) AS SEP2021_ACTREV,
	(CASE WHEN OCT2021_ACTREV = . THEN 0 ELSE OCT2021_ACTREV END) AS OCT2021_ACTREV,
	(CASE WHEN NOV2021_ACTREV = . THEN 0 ELSE NOV2021_ACTREV END) AS NOV2021_ACTREV,
	(CASE WHEN DEC2021_ACTREV = . THEN 0 ELSE DEC2021_ACTREV END) AS DEC2021_ACTREV,

	(CASE WHEN JAN2022_ACTREV = . THEN 0 ELSE JAN2022_ACTREV END) AS JAN2022_ACTREV,
	(CASE WHEN FEB2022_ACTREV = . THEN 0 ELSE FEB2022_ACTREV END) AS FEB2022_ACTREV,
	(CASE WHEN MAR2022_ACTREV = . THEN 0 ELSE MAR2022_ACTREV END) AS MAR2022_ACTREV,
	(CASE WHEN APR2022_ACTREV = . THEN 0 ELSE APR2022_ACTREV END) AS APR2022_ACTREV,
	(CASE WHEN MAY2022_ACTREV = . THEN 0 ELSE MAY2022_ACTREV END) AS MAY2022_ACTREV,
	(CASE WHEN JUN2022_ACTREV = . THEN 0 ELSE JUN2022_ACTREV END) AS JUN2022_ACTREV,
	(CASE WHEN JUL2022_ACTREV = . THEN 0 ELSE JUL2022_ACTREV END) AS JUL2022_ACTREV,
	(CASE WHEN AUG2022_ACTREV = . THEN 0 ELSE AUG2022_ACTREV END) AS AUG2022_ACTREV,
	(CASE WHEN SEP2022_ACTREV = . THEN 0 ELSE SEP2022_ACTREV END) AS SEP2022_ACTREV,
	(CASE WHEN OCT2022_ACTREV = . THEN 0 ELSE OCT2022_ACTREV END) AS OCT2022_ACTREV,
	(CASE WHEN NOV2022_ACTREV = . THEN 0 ELSE NOV2022_ACTREV END) AS NOV2022_ACTREV,
	(CASE WHEN DEC2022_ACTREV = . THEN 0 ELSE DEC2022_ACTREV END) AS DEC2022_ACTREV

	from RevReal1.SALES_MOTION_SUMMARY_RR;
quit;

/*Adding Rep, Manager and Leader Info*/
/*NOTE: RevReal1.static_data can be updated using the third SAS code in the Sharepoint reference*/
proc sql;
	create table RevReal1.SALES2REV_RECOGNITION_0 as select a.*,
	b.FinalRepName as Rep_Name,
	b.FinalRepNameManager as Manager,
	b.FinalRepNameLeader as Leader
	from RevReal1.SALES_MOTION_SUMMARY_RR2 a 
	left join RevReal1.static_data b on a.Company_Number = b.Company_Number;
quit;


/*26.1 - Local MASTER COMPANY AND ENTITY MANAGMENT - for adding deferred flag*/
PROC SQL;
CREATE TABLE RevReal1.REV_MN_WIPC_MGMT_FD_0 AS 
SELECT
	TYPE,
	BU,
	LOB,
	b.ENTITY_CODE,
	b.ENTITY_NAME,
	COMPANY_ID,
	b.COMPANY_NAME,
	FINANCE_PRODUCT_DWH,
	CHARGE_TYPE,
	MONTH_START,
	WEST_BUSINESS_UNIT,
	CHARGE_CODE,
	CHARGE_DESC,
	CHARGE_CODE_TYPE,
	INV_CURR_CODE,
	SOURCEDATA,
	FINANCE_PRODUCT_GSO,
	ADDON_MAC_SUBSC,
	RECAST_TYPE,
	DEFERRED_REVENUE_FLAG,
	MINS,
	QTY,
	USD_REV,
	INV_REV
FROM RevReal1.REV_MN_WIPC a left join RevReal1.COMP_ENT_MGMT b on a.COMPANY_ID = b.COMPANY_NUMBER;
QUIT;

/*26.2*/
PROC SQL;
CREATE TABLE RevReal1.REV_MN_WIPC_MGMT_FD AS 
	SELECT DISTINCT 
		TYPE,
		BU,
		LOB,
		(CASE WHEN ENTITY_CODE IS MISSING THEN COMPANY_ID ELSE ENTITY_CODE END) AS ENTITY_CODE,
		(CASE WHEN entity_name IS MISSING OR entity_name = 'NO ENTITY' THEN company_name ELSE entity_name END) AS ENTITY_NAME,
		COMPANY_ID,
		COMPANY_NAME,
		FINANCE_PRODUCT_DWH,
		CHARGE_TYPE,
		MONTH_START,
		WEST_BUSINESS_UNIT,
		CHARGE_CODE,
		CHARGE_DESC,
		CHARGE_CODE_TYPE,
		INV_CURR_CODE,
		SOURCEDATA,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		DEFERRED_REVENUE_FLAG,
		SUM(MINS) AS MINS,
		SUM(QTY) AS QTY,
		SUM(USD_REV) AS USD_REV,
		SUM(INV_REV) AS INV_REV
	FROM RevReal1.REV_MN_WIPC_MGMT_FD_0
		GROUP BY
		TYPE,
		BU,
		LOB,
		(CASE WHEN ENTITY_CODE IS MISSING THEN COMPANY_ID ELSE ENTITY_CODE END),
		(CASE WHEN entity_name IS MISSING OR entity_name = 'NO ENTITY' THEN company_name ELSE entity_name END),
		COMPANY_ID,
		COMPANY_NAME,
		FINANCE_PRODUCT_DWH,
		CHARGE_TYPE,
		MONTH_START,
		WEST_BUSINESS_UNIT,
		CHARGE_CODE,
		CHARGE_DESC,
		CHARGE_CODE_TYPE,
		INV_CURR_CODE,
		SOURCEDATA,
		FINANCE_PRODUCT_GSO,
		ADDON_MAC_SUBSC,
		RECAST_TYPE,
		DEFERRED_REVENUE_FLAG;
QUIT;

/*26.3*/
proc sql;
	create table RevReal1.HAS_DEFERRED as
	select distinct
	COMPANY_ID,
	CATX("_", FINANCE_PRODUCT_GSO, ADDON_MAC_SUBSC, RECAST_TYPE) AS FINANCE_PRODUCT_COMBO,
	'YES' as HAS_DEFERRED
	from RevReal1.REV_MN_WIPC_MGMT_FD
	WHERE DEFERRED_REVENUE_FLAG = 'PRE-BILLED'
;
quit;

***==================================================================================================***;
/*27.1 - Region*/
proc sql;
	create table REVENUE_REGION as
	select DISTINCT
		BU,
		COMPANY_ID,
		COMPANY_NAME
	from RevReal1.REV_MN_WIPC_MGMT WHERE BU IS NOT MISSING;
quit;

*Get New Company Number from Anomaly Files;
proc sql; create table anomaly_file1 as select distinct 
	1 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I1 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file2 as select distinct 
	2 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I2 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file3 as select distinct 
	3 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I3 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file4 as select distinct 
	4 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I4 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file5 as select distinct 
	5 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I5 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file6 as select distinct 
	6 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I6 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file7 as select distinct 
	7 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I7 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
proc sql; create table anomaly_file8 as select distinct 
	8 as file_ind, GSO_New_Company_Number, COMPANY_NUMBER, COMPANY_NAME
 	from RevReal1.ANOMALY_OPPS_FOR_REMATCH_I8 
	where GSO_New_Company_Number NOT IN ('', '.') and GSO_New_Company_Number NE COMPANY_NUMBER
	and trim(COMPANY_NUMBER) NE '';
quit;
data anomaly_files;
	set anomaly_file1 anomaly_file2 anomaly_file3 anomaly_file4 
		anomaly_file5 anomaly_file6 anomaly_file7 anomaly_file8;
run;
proc sort data=anomaly_files;
	by GSO_New_Company_Number COMPANY_NUMBER descending file_ind;
run;
data RevReal1.anomaly_files (keep = GSO_New_Company_Number COMPANY_NUMBER);
	set anomaly_files;
	by GSO_New_Company_Number;
	if first.GSO_New_Company_Number then output;
run;

proc sql;
	create table RevReal1.REVENUE_REGION as select 
/*	create table REVENUE_REGION_new as select distinct*/
	a.BU, a.COMPANY_NAME, a.COMPANY_ID, b.COMPANY_NUMBER, b.GSO_New_Company_Number,
	case when trim(b.GSO_New_Company_Number) NE '' then b.GSO_New_Company_Number 
		else a.COMPANY_ID end as COMPANY_ID_final
	from REVENUE_REGION a left join RevReal1.anomaly_files b
	on trim(a.COMPANY_ID) = trim(b.COMPANY_NUMBER);
quit;


/*28 - FINAL DATASET CONNECTED TO THE DASHBOARD*/
proc sql;
	create table SALES2REV_RECOGNITION as select distinct
	a.*, (case when b.HAS_DEFERRED is not null then 'YES' else 'NO' end) as HAS_DEFERRED
	from RevReal1.SALES2REV_RECOGNITION_0 a left join RevReal1.HAS_DEFERRED b on
	a.COMPANY_NUMBER = b.COMPANY_ID AND 
	a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO
;
quit;
/*Adding Region to the dataset*/
proc sql;
	create  table RevReal1.SALES2REV_RECOGNITION  as select distinct a.*, b.BU as REGION 
	from SALES2REV_RECOGNITION a left join RevReal1.REVENUE_REGION b
	on a.COMPANY_NUMBER = b.COMPANY_ID_final;
quit;

/*29 - FINAL Revenue dataset CONNECTED TO THE DASHBOARD*/
proc sql;
	create table RevReal1.REV_MN_WIPC_MGMT_SUMMARY as
	select distinct
	COMPANY_ID,
	COMPANY_NAME,	
	ENTITY_CODE,
	ENTITY_NAME,
	CATX("_", FINANCE_PRODUCT_GSO, ADDON_MAC_SUBSC, RECAST_TYPE) AS FINANCE_PRODUCT_COMBO,
	DEFERRED_REVENUE_FLAG,
	MONTH_START,
	SUM(USD_REV) AS USD_REV
	from RevReal1.REV_MN_WIPC_MGMT_FD WHERE MONTH_START >= '1Jan2019:0:0:0'dt
	GROUP BY
	COMPANY_ID,
	COMPANY_NAME,	
	ENTITY_CODE,
	ENTITY_NAME,
	CATX("_", FINANCE_PRODUCT_GSO, ADDON_MAC_SUBSC, RECAST_TYPE),
	DEFERRED_REVENUE_FLAG,
	MONTH_START
;
quit;

/*Get Data-Derived Sales Motion for 2019 Data*/

/* SALES2REV_RECOGNITION*/
proc sql; 
	create table RevReal1.SALES2REV_RECOGNITION_final as select 
	a.COMPANY_NUMBER,
	a.COMPANY_NAME,
	a.ENTITY_CODE,
	a.ENTITY_NAME,
	a.OPPORTUNITYID,
	a.OPP_DURATION,
	a.OPP_CONTRACT_START_DATE,
	a.OPPORTUNITY_CLOSE_DATE,
	a.OPPORTUNITY_CLOSE_YEAR,
	a.OPPORTUNITY_CLOSE_MONTH,
	a.OPPORTUNITY_CREATE_DATE,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_SALES_MOTION else a.OPP_SALES_MOTION end as OPP_SALES_MOTION,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_SALES_MOTION_CONVERTED else a.OPP_SALES_MOTION_CONVERTED end as OPP_SALES_MOTION_CONVERTED,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_LINE_SALES_MOTION else a.OPP_LINE_SALES_MOTION end as OPP_LINE_SALES_MOTION,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_LINE_MOTION_DETAIL else a.OPP_LINE_MOTION_DETAIL end as OPP_LINE_MOTION_DETAIL,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_LINE_MOTION_DD else a.OPP_LINE_MOTION_DD end as OPP_LINE_MOTION_DD,
	case when a.OPPORTUNITY_CLOSE_YEAR = 2019 then b.OPP_LINE_MOTION_DETAIL_DD else a.OPP_LINE_MOTION_DETAIL_DD end as OPP_LINE_MOTION_DETAIL_DD,
	a.OPPORTUNITY_NAME,
	a.OPPORTUNITY_PRODUCT_NAME,
	a.OPP_TIMEFRAME,
	a.TOTAL_CONTRACT_VARIANCE,
	a.CUSTOMER_TYPE,
	a.OPP_WEST_BUSINESS_UNIT,
	a.OPP_TCV_CLASSIFICATION,
	a.FINANCE_PRODUCT_GSO,
	a.ADDON_MAC_SUBSC,
	a.RECAST_TYPE,
	a.FINANCE_PRODUCT_COMBO,
	a.OPP_PRODUCT_TCV_USD,
	a.OPP_PROD_FAM_ACV,
	a.ProdFamACV,
	a.WIPC_Partner,
	a.Segment,
	a.REV_SOURCEDATA,
	a.OPP_MATCH_REASON,
	a.OPP_MATCH_STATUS,
	a.UPSELL_ONLY_COMP,
	a.OPP_CONTRACT_START_DATE_A,
	a.NEW_CONTRACT_START_DATE,
	a.NEW_CONTRACT_END_DATE,
	a.CURRENT_DATE,
	a.LAPSE_STATUS,
	a.Upsell_AVGREV,
	a.Projected_Bill,

	a.JAN2019_ACTREV,	a.FEB2019_ACTREV,	a.MAR2019_ACTREV,	a.APR2019_ACTREV,	a.MAY2019_ACTREV,	a.JUN2019_ACTREV,
	a.JUL2019_ACTREV,	a.AUG2019_ACTREV,	a.SEP2019_ACTREV,	a.OCT2019_ACTREV,	a.NOV2019_ACTREV,	a.DEC2019_ACTREV,

	a.JAN2020_ACTREV,	a.FEB2020_ACTREV,	a.MAR2020_ACTREV,	a.APR2020_ACTREV,	a.MAY2020_ACTREV,	a.JUN2020_ACTREV,
	a.JUL2020_ACTREV,	a.AUG2020_ACTREV,	a.SEP2020_ACTREV,	a.OCT2020_ACTREV,	a.NOV2020_ACTREV,	a.DEC2020_ACTREV,

	a.JAN2021_ACTREV,	a.FEB2021_ACTREV,	a.MAR2021_ACTREV,	a.APR2021_ACTREV,	a.MAY2021_ACTREV,	a.JUN2021_ACTREV,
	a.JUL2021_ACTREV,	a.AUG2021_ACTREV,	a.SEP2021_ACTREV,	a.OCT2021_ACTREV,	a.NOV2021_ACTREV,	a.DEC2021_ACTREV,

	a.JAN2022_ACTREV,	a.FEB2022_ACTREV,	a.MAR2022_ACTREV,	a.APR2022_ACTREV,	a.MAY2022_ACTREV,	a.JUN2022_ACTREV,
	a.JUL2022_ACTREV,	a.AUG2022_ACTREV,	a.SEP2022_ACTREV,	a.OCT2022_ACTREV,	a.NOV2022_ACTREV,	a.DEC2022_ACTREV,
	a.Rep_Name, a.Manager, a.Leader, a.HAS_DEFERRED, a.REGION

	from RevReal1.SALES2REV_RECOGNITION a left join Data2019.SALES2REV_RECOGNITION b
	on a.COMPANY_NUMBER = b.COMPANY_NUMBER
	and a.OPPORTUNITYID = b.OPPORTUNITYID
	and a.OPPORTUNITY_PRODUCT_NAME = b.OPPORTUNITY_PRODUCT_NAME
	and a.FINANCE_PRODUCT_COMBO = b.FINANCE_PRODUCT_COMBO
	and a.OPPORTUNITY_CLOSE_DATE = b.OPPORTUNITY_CLOSE_DATE;
quit;
 

